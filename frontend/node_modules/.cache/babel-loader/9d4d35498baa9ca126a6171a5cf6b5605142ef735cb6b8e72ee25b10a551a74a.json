{"ast":null,"code":"'use client';\n\nimport { readContractQueryOptions, structuralSharing } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useReadContract */\nexport function useReadContract(parameters = {}) {\n  const {\n    abi,\n    address,\n    functionName,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = readContractQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(address && abi && functionName && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled,\n    structuralSharing: query.structuralSharing ?? structuralSharing\n  });\n}","map":{"version":3,"names":["readContractQueryOptions","structuralSharing","useQuery","useChainId","useConfig","useReadContract","parameters","abi","address","functionName","query","config","chainId","options","enabled","Boolean"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useReadContract.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ReadContractErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { UnionCompute } from '@wagmi/core/internal'\nimport {\n  type ReadContractData,\n  type ReadContractOptions,\n  type ReadContractQueryFnData,\n  type ReadContractQueryKey,\n  readContractQueryOptions,\n  structuralSharing,\n} from '@wagmi/core/query'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseReadContractParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config = Config,\n  selectData = ReadContractData<abi, functionName, args>,\n> = UnionCompute<\n  ReadContractOptions<abi, functionName, args, config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      ReadContractQueryFnData<abi, functionName, args>,\n      ReadContractErrorType,\n      selectData,\n      ReadContractQueryKey<abi, functionName, args, config>\n    >\n>\n\nexport type UseReadContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends ContractFunctionName<\n    abi,\n    'pure' | 'view'\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  selectData = ReadContractData<abi, functionName, args>,\n> = UseQueryReturnType<selectData, ReadContractErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useReadContract */\nexport function useReadContract<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config = ResolvedRegister['config'],\n  selectData = ReadContractData<abi, functionName, args>,\n>(\n  parameters: UseReadContractParameters<\n    abi,\n    functionName,\n    args,\n    config,\n    selectData\n  > = {} as any,\n): UseReadContractReturnType<abi, functionName, args, selectData> {\n  const { abi, address, functionName, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = readContractQueryOptions<config, abi, functionName, args>(\n    config,\n    { ...(parameters as any), chainId: parameters.chainId ?? chainId },\n  )\n  const enabled = Boolean(\n    address && abi && functionName && (query.enabled ?? true),\n  )\n\n  return useQuery({\n    ...query,\n    ...options,\n    enabled,\n    structuralSharing: query.structuralSharing ?? structuralSharing,\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAQZ,SAKEA,wBAAwB,EACxBC,iBAAiB,QACZ,mBAAmB;AAI1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAwC1C;AACA,OAAM,SAAUC,eAAeA,CAO7BC,UAAA,GAMI,EAAS;EAEb,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC,YAAY;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGJ,UAAU;EAE7D,MAAMK,MAAM,GAAGP,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMM,OAAO,GAAGT,UAAU,CAAC;IAAEQ;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGb,wBAAwB,CACtCW,MAAM,EACN;IAAE,GAAIL,UAAkB;IAAEM,OAAO,EAAEN,UAAU,CAACM,OAAO,IAAIA;EAAO,CAAE,CACnE;EACD,MAAME,OAAO,GAAGC,OAAO,CACrBP,OAAO,IAAID,GAAG,IAAIE,YAAY,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAC1D;EAED,OAAOZ,QAAQ,CAAC;IACd,GAAGQ,KAAK;IACR,GAAGG,OAAO;IACVC,OAAO;IACPb,iBAAiB,EAAES,KAAK,CAACT,iBAAiB,IAAIA;GAC/C,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}