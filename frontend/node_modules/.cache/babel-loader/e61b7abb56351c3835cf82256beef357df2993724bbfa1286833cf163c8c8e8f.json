{"ast":null,"code":"'use client';\n\nimport { estimateMaxPriorityFeePerGasQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useEstimateMaxPriorityFeePerGas */\nexport function useEstimateMaxPriorityFeePerGas() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = estimateMaxPriorityFeePerGasQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  return useQuery({\n    ...query,\n    ...options\n  });\n}","map":{"version":3,"names":["estimateMaxPriorityFeePerGasQueryOptions","useQuery","useChainId","useConfig","useEstimateMaxPriorityFeePerGas","parameters","arguments","length","undefined","query","config","chainId","options"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useEstimateMaxPriorityFeePerGas.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  EstimateMaxPriorityFeePerGasErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type EstimateMaxPriorityFeePerGasData,\n  type EstimateMaxPriorityFeePerGasOptions,\n  type EstimateMaxPriorityFeePerGasQueryFnData,\n  type EstimateMaxPriorityFeePerGasQueryKey,\n  estimateMaxPriorityFeePerGasQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEstimateMaxPriorityFeePerGasParameters<\n  config extends Config = Config,\n  selectData = EstimateMaxPriorityFeePerGasData,\n> = Compute<\n  EstimateMaxPriorityFeePerGasOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      EstimateMaxPriorityFeePerGasQueryFnData,\n      EstimateMaxPriorityFeePerGasErrorType,\n      selectData,\n      EstimateMaxPriorityFeePerGasQueryKey<config>\n    >\n>\n\nexport type UseEstimateMaxPriorityFeePerGasReturnType<\n  selectData = EstimateMaxPriorityFeePerGasData,\n> = UseQueryReturnType<selectData, EstimateMaxPriorityFeePerGasErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEstimateMaxPriorityFeePerGas */\nexport function useEstimateMaxPriorityFeePerGas<\n  config extends Config = ResolvedRegister['config'],\n  selectData = EstimateMaxPriorityFeePerGasData,\n>(\n  parameters: UseEstimateMaxPriorityFeePerGasParameters<\n    config,\n    selectData\n  > = {},\n): UseEstimateMaxPriorityFeePerGasReturnType<selectData> {\n  const { query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = estimateMaxPriorityFeePerGasQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n\n  return useQuery({ ...query, ...options })\n}\n"],"mappings":"AAAA,YAAY;;AAQZ,SAKEA,wCAAwC,QACnC,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAoB1C;AACA,OAAM,SAAUC,+BAA+BA,CAAA,EAOvC;EAAA,IAHNC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAGI,EAAE;EAEN,MAAM;IAAEG,KAAK,GAAG;EAAE,CAAE,GAAGJ,UAAU;EAEjC,MAAMK,MAAM,GAAGP,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMM,OAAO,GAAGT,UAAU,CAAC;IAAEQ;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGZ,wCAAwC,CAACU,MAAM,EAAE;IAC/D,GAAGL,UAAU;IACbM,OAAO,EAAEN,UAAU,CAACM,OAAO,IAAIA;GAChC,CAAC;EAEF,OAAOV,QAAQ,CAAC;IAAE,GAAGQ,KAAK;IAAE,GAAGG;EAAO,CAAE,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}