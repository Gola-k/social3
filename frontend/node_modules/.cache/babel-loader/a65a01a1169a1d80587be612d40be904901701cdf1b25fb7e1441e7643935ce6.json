{"ast":null,"code":"import { getBlockNumber } from '../actions/getBlockNumber.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getBlockNumberQueryOptions(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    gcTime: 0,\n    async queryFn(_ref) {\n      let {\n        queryKey\n      } = _ref;\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const blockNumber = await getBlockNumber(config, parameters);\n      return blockNumber ?? null;\n    },\n    queryKey: getBlockNumberQueryKey(options)\n  };\n}\nexport function getBlockNumberQueryKey() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return ['blockNumber', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getBlockNumber","filterQueryOptions","getBlockNumberQueryOptions","config","options","arguments","length","undefined","gcTime","queryFn","_ref","queryKey","scopeKey","_","parameters","blockNumber","getBlockNumberQueryKey"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/core/src/query/getBlockNumber.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetBlockNumberErrorType,\n  type GetBlockNumberParameters,\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from '../actions/getBlockNumber.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetBlockNumberOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<GetBlockNumberParameters<config, chainId>> & ScopeKeyParameter\n>\n\nexport function getBlockNumberQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: GetBlockNumberOptions<config, chainId> = {}) {\n  return {\n    gcTime: 0,\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      const blockNumber = await getBlockNumber(config, parameters)\n      return blockNumber ?? null\n    },\n    queryKey: getBlockNumberQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetBlockNumberQueryFnData,\n    GetBlockNumberErrorType,\n    GetBlockNumberData,\n    GetBlockNumberQueryKey<config, chainId>\n  >\n}\n\nexport type GetBlockNumberQueryFnData = GetBlockNumberReturnType\n\nexport type GetBlockNumberData = GetBlockNumberQueryFnData\n\nexport function getBlockNumberQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetBlockNumberOptions<config, chainId> = {}) {\n  return ['blockNumber', filterQueryOptions(options)] as const\n}\n\nexport type GetBlockNumberQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getBlockNumberQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAIEA,cAAc,QACT,8BAA8B;AAIrC,SAASC,kBAAkB,QAAQ,YAAY;AAS/C,OAAM,SAAUC,0BAA0BA,CAGxCC,MAAc,EAAsD;EAAA,IAApDC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkD,EAAE;EACpE,OAAO;IACLG,MAAM,EAAE,CAAC;IACT,MAAMC,OAAOA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAQ,CAAE,GAAAD,IAAA;MACxB,MAAM;QAAEE,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAMI,WAAW,GAAG,MAAMf,cAAc,CAACG,MAAM,EAAEW,UAAU,CAAC;MAC5D,OAAOC,WAAW,IAAI,IAAI;IAC5B,CAAC;IACDJ,QAAQ,EAAEK,sBAAsB,CAACZ,OAAO;GAMzC;AACH;AAMA,OAAM,SAAUY,sBAAsBA,CAAA,EAGgB;EAAA,IAApDZ,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkD,EAAE;EACpD,OAAO,CAAC,aAAa,EAAEJ,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}