{"ast":null,"code":"'use client';\n\nimport { verifyMessageQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useVerifyMessage */\nexport function useVerifyMessage() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    address,\n    message,\n    signature,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = verifyMessageQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(address && message && signature && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["verifyMessageQueryOptions","useQuery","useChainId","useConfig","useVerifyMessage","parameters","arguments","length","undefined","address","message","signature","query","config","chainId","options","enabled","Boolean"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useVerifyMessage.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  ResolvedRegister,\n  VerifyMessageErrorType,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type VerifyMessageData,\n  type VerifyMessageOptions,\n  type VerifyMessageQueryKey,\n  verifyMessageQueryOptions,\n} from '@wagmi/core/query'\nimport type { VerifyMessageQueryFnData } from '@wagmi/core/query'\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseVerifyMessageParameters<\n  config extends Config = Config,\n  selectData = VerifyMessageData,\n> = Compute<\n  VerifyMessageOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      VerifyMessageQueryFnData,\n      VerifyMessageErrorType,\n      selectData,\n      VerifyMessageQueryKey<config>\n    >\n>\n\nexport type UseVerifyMessageReturnType<selectData = VerifyMessageData> =\n  UseQueryReturnType<selectData, VerifyMessageErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useVerifyMessage */\nexport function useVerifyMessage<\n  config extends Config = ResolvedRegister['config'],\n  selectData = VerifyMessageData,\n>(\n  parameters: UseVerifyMessageParameters<config, selectData> = {},\n): UseVerifyMessageReturnType<selectData> {\n  const { address, message, signature, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = verifyMessageQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(\n    address && message && signature && (query.enabled ?? true),\n  )\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAQZ,SAIEA,yBAAyB,QACpB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,gBAAgBA,CAAA,EAIiC;EAAA,IAA/DC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6D,EAAE;EAE/D,MAAM;IAAEG,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGP,UAAU;EAE9D,MAAMQ,MAAM,GAAGV,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMS,OAAO,GAAGZ,UAAU,CAAC;IAAEW;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGf,yBAAyB,CAACa,MAAM,EAAE;IAChD,GAAGR,UAAU;IACbS,OAAO,EAAET,UAAU,CAACS,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CACrBR,OAAO,IAAIC,OAAO,IAAIC,SAAS,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAC3D;EAED,OAAOf,QAAQ,CAAC;IAAE,GAAGW,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}