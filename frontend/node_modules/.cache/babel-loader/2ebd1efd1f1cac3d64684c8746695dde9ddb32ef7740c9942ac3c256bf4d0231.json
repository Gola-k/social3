{"ast":null,"code":"import { getTransactionReceipt } from '../actions/getTransactionReceipt.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getTransactionReceiptQueryOptions(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    queryFn(_ref) {\n      let {\n        queryKey\n      } = _ref;\n      const {\n        hash,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!hash) throw new Error('hash is required');\n      return getTransactionReceipt(config, {\n        ...parameters,\n        hash\n      });\n    },\n    queryKey: getTransactionReceiptQueryKey(options)\n  };\n}\nexport function getTransactionReceiptQueryKey(options) {\n  return ['getTransactionReceipt', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getTransactionReceipt","filterQueryOptions","getTransactionReceiptQueryOptions","config","options","arguments","length","undefined","queryFn","_ref","queryKey","hash","scopeKey","_","parameters","Error","getTransactionReceiptQueryKey"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/core/src/query/getTransactionReceipt.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetTransactionReceiptErrorType,\n  type GetTransactionReceiptParameters,\n  getTransactionReceipt,\n} from '../actions/getTransactionReceipt.js'\nimport type { GetTransactionReceiptReturnType } from '../actions/getTransactionReceipt.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetTransactionReceiptOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = Compute<\n  ExactPartial<GetTransactionReceiptParameters<config, chainId>> &\n    ScopeKeyParameter\n>\n\nexport function getTransactionReceiptQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(config: config, options: GetTransactionReceiptOptions<config, chainId> = {}) {\n  return {\n    queryFn({ queryKey }) {\n      const { hash, scopeKey: _, ...parameters } = queryKey[1]\n      if (!hash) throw new Error('hash is required')\n      return getTransactionReceipt(config, { ...parameters, hash })\n    },\n    queryKey: getTransactionReceiptQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetTransactionReceiptQueryFnData<config, chainId>,\n    GetTransactionReceiptErrorType,\n    GetTransactionReceiptData<config, chainId>,\n    GetTransactionReceiptQueryKey<config, chainId>\n  >\n}\nexport type GetTransactionReceiptQueryFnData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetTransactionReceiptReturnType<config, chainId>\n\nexport type GetTransactionReceiptData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = GetTransactionReceiptQueryFnData<config, chainId>\n\nexport function getTransactionReceiptQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n>(options: GetTransactionReceiptOptions<config, chainId>) {\n  return ['getTransactionReceipt', filterQueryOptions(options)] as const\n}\n\nexport type GetTransactionReceiptQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'],\n> = ReturnType<typeof getTransactionReceiptQueryKey<config, chainId>>\n"],"mappings":"AAEA,SAGEA,qBAAqB,QAChB,qCAAqC;AAK5C,SAASC,kBAAkB,QAAQ,YAAY;AAU/C,OAAM,SAAUC,iCAAiCA,CAG/CC,MAAc,EAA6D;EAAA,IAA3DC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyD,EAAE;EAC3E,OAAO;IACLG,OAAOA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAQ,CAAE,GAAAD,IAAA;MAClB,MAAM;QAAEE,IAAI;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MACxD,IAAI,CAACC,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,kBAAkB,CAAC;MAC9C,OAAOf,qBAAqB,CAACG,MAAM,EAAE;QAAE,GAAGW,UAAU;QAAEH;MAAI,CAAE,CAAC;IAC/D,CAAC;IACDD,QAAQ,EAAEM,6BAA6B,CAACZ,OAAO;GAMhD;AACH;AAWA,OAAM,SAAUY,6BAA6BA,CAG3CZ,OAAsD;EACtD,OAAO,CAAC,uBAAuB,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}