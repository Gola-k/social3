{"ast":null,"code":"'use client';\n\nimport { useMutation } from '@tanstack/react-query';\nimport { reconnectMutationOptions } from '@wagmi/core/query';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useReconnect */\nexport function useReconnect() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    mutation\n  } = parameters;\n  const config = useConfig(parameters);\n  const mutationOptions = reconnectMutationOptions(config);\n  const {\n    mutate,\n    mutateAsync,\n    ...result\n  } = useMutation({\n    ...mutation,\n    ...mutationOptions\n  });\n  return {\n    ...result,\n    connectors: config.connectors,\n    reconnect: mutate,\n    reconnectAsync: mutateAsync\n  };\n}","map":{"version":3,"names":["useMutation","reconnectMutationOptions","useConfig","useReconnect","parameters","arguments","length","undefined","mutation","config","mutationOptions","mutate","mutateAsync","result","connectors","reconnect","reconnectAsync"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useReconnect.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type { Connector, ReconnectErrorType } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type ReconnectData,\n  type ReconnectMutate,\n  type ReconnectMutateAsync,\n  type ReconnectVariables,\n  reconnectMutationOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseReconnectParameters<context = unknown> = Compute<\n  ConfigParameter & {\n    mutation?:\n      | UseMutationParameters<\n          ReconnectData,\n          ReconnectErrorType,\n          ReconnectVariables,\n          context\n        >\n      | undefined\n  }\n>\n\nexport type UseReconnectReturnType<context = unknown> = Compute<\n  UseMutationReturnType<\n    ReconnectData,\n    ReconnectErrorType,\n    ReconnectVariables,\n    context\n  > & {\n    connectors: readonly Connector[]\n    reconnect: ReconnectMutate<context>\n    reconnectAsync: ReconnectMutateAsync<context>\n  }\n>\n\n/** https://wagmi.sh/react/api/hooks/useReconnect */\nexport function useReconnect<context = unknown>(\n  parameters: UseReconnectParameters<context> = {},\n): UseReconnectReturnType<context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = reconnectMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  return {\n    ...result,\n    connectors: config.connectors,\n    reconnect: mutate,\n    reconnectAsync: mutateAsync,\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,WAAW,QAAQ,uBAAuB;AAGnD,SAKEC,wBAAwB,QACnB,mBAAmB;AAO1B,SAASC,SAAS,QAAQ,gBAAgB;AA4B1C;AACA,OAAM,SAAUC,YAAYA,CAAA,EACsB;EAAA,IAAhDC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA8C,EAAE;EAEhD,MAAM;IAAEG;EAAQ,CAAE,GAAGJ,UAAU;EAE/B,MAAMK,MAAM,GAAGP,SAAS,CAACE,UAAU,CAAC;EAEpC,MAAMM,eAAe,GAAGT,wBAAwB,CAACQ,MAAM,CAAC;EACxD,MAAM;IAAEE,MAAM;IAAEC,WAAW;IAAE,GAAGC;EAAM,CAAE,GAAGb,WAAW,CAAC;IACrD,GAAGQ,QAAQ;IACX,GAAGE;GACJ,CAAC;EAEF,OAAO;IACL,GAAGG,MAAM;IACTC,UAAU,EAAEL,MAAM,CAACK,UAAU;IAC7BC,SAAS,EAAEJ,MAAM;IACjBK,cAAc,EAAEJ;GACjB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}