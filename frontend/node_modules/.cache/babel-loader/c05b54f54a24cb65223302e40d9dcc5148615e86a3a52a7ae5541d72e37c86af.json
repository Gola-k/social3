{"ast":null,"code":"export const n6=new Intl.NumberFormat(\"en-us\",{style:\"decimal\",minimumFractionDigits:0,maximumFractionDigits:6});export const n4=new Intl.NumberFormat(\"en-us\",{style:\"decimal\",minimumFractionDigits:0,maximumFractionDigits:4});export const c2=new Intl.NumberFormat(\"en-us\",{style:\"currency\",currency:\"USD\",minimumFractionDigits:2,maximumFractionDigits:2});/**\n * Returns a string of form \"abc...xyz\"\n * @param {string} str string to string\n * @param {number} n number of chars to keep at front/end\n * @returns {string}\n */export const getEllipsisTxt=function(str){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:6;if(str){return`${str.slice(0,n)}...${str.slice(str.length-n)}`;}return\"\";};export const tokenValue=(value,decimals)=>decimals?value/Math.pow(10,decimals):value;/**\n * Return a formatted string with the symbol at the end\n * @param {number} value integer value\n * @param {number} decimals number of decimals\n * @param {string} symbol token symbol\n * @returns {string}\n */export const tokenValueTxt=(value,decimals,symbol)=>`${n4.format(tokenValue(value,decimals))} ${symbol}`;","map":{"version":3,"names":["n6","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","n4","c2","currency","getEllipsisTxt","str","n","arguments","length","undefined","slice","tokenValue","value","decimals","Math","pow","tokenValueTxt","symbol","format"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/src/helpers/formatters.js"],"sourcesContent":["export const n6 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 6,\n});\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 4,\n});\n\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\n/**\n * Returns a string of form \"abc...xyz\"\n * @param {string} str string to string\n * @param {number} n number of chars to keep at front/end\n * @returns {string}\n */\nexport const getEllipsisTxt = (str, n = 6) => {\n  if (str) {\n    return `${str.slice(0, n)}...${str.slice(str.length - n)}`;\n  }\n  return \"\";\n};\n\nexport const tokenValue = (value, decimals) =>\n  decimals ? value / Math.pow(10, decimals) : value;\n\n/**\n * Return a formatted string with the symbol at the end\n * @param {number} value integer value\n * @param {number} decimals number of decimals\n * @param {string} symbol token symbol\n * @returns {string}\n */\nexport const tokenValueTxt = (value, decimals, symbol) =>\n  `${n4.format(tokenValue(value, decimals))} ${symbol}`;\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,EAAE,CAAG,GAAI,CAAAC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CAC/CC,KAAK,CAAE,SAAS,CAChBC,qBAAqB,CAAE,CAAC,CACxBC,qBAAqB,CAAE,CACzB,CAAC,CAAC,CACF,MAAO,MAAM,CAAAC,EAAE,CAAG,GAAI,CAAAL,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CAC/CC,KAAK,CAAE,SAAS,CAChBC,qBAAqB,CAAE,CAAC,CACxBC,qBAAqB,CAAE,CACzB,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAE,EAAE,CAAG,GAAI,CAAAN,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CAC/CC,KAAK,CAAE,UAAU,CACjBK,QAAQ,CAAE,KAAK,CACfJ,qBAAqB,CAAE,CAAC,CACxBC,qBAAqB,CAAE,CACzB,CAAC,CAAC,CAEF;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,cAAc,CAAG,QAAAA,CAACC,GAAG,CAAY,IAAV,CAAAC,CAAC,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACvC,GAAIF,GAAG,CAAE,CACP,MAAO,GAAGA,GAAG,CAACK,KAAK,CAAC,CAAC,CAAEJ,CAAC,CAAC,MAAMD,GAAG,CAACK,KAAK,CAACL,GAAG,CAACG,MAAM,CAAGF,CAAC,CAAC,EAAE,CAC5D,CACA,MAAO,EAAE,CACX,CAAC,CAED,MAAO,MAAM,CAAAK,UAAU,CAAGA,CAACC,KAAK,CAAEC,QAAQ,GACxCA,QAAQ,CAAGD,KAAK,CAAGE,IAAI,CAACC,GAAG,CAAC,EAAE,CAAEF,QAAQ,CAAC,CAAGD,KAAK,CAEnD;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,aAAa,CAAGA,CAACJ,KAAK,CAAEC,QAAQ,CAAEI,MAAM,GACnD,GAAGhB,EAAE,CAACiB,MAAM,CAACP,UAAU,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAC,IAAII,MAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}