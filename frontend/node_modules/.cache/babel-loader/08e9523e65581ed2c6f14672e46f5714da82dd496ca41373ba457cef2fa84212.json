{"ast":null,"code":"import { prepareTransactionRequest } from '../actions/prepareTransactionRequest.js';\nimport { filterQueryOptions } from './utils.js';\nexport function prepareTransactionRequestQueryOptions(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    queryFn(_ref) {\n      let {\n        queryKey\n      } = _ref;\n      const {\n        scopeKey: _,\n        to,\n        ...parameters\n      } = queryKey[1];\n      if (!to) throw new Error('to is required');\n      return prepareTransactionRequest(config, {\n        to,\n        ...parameters\n      });\n    },\n    queryKey: prepareTransactionRequestQueryKey(options)\n  };\n}\nexport function prepareTransactionRequestQueryKey(options) {\n  return ['prepareTransactionRequest', filterQueryOptions(options)];\n}","map":{"version":3,"names":["prepareTransactionRequest","filterQueryOptions","prepareTransactionRequestQueryOptions","config","options","arguments","length","undefined","queryFn","_ref","queryKey","scopeKey","_","to","parameters","Error","prepareTransactionRequestQueryKey"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/core/src/query/prepareTransactionRequest.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport type { PrepareTransactionRequestRequest as viem_PrepareTransactionRequestRequest } from 'viem'\n\nimport {\n  type PrepareTransactionRequestErrorType,\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../actions/prepareTransactionRequest.js'\nimport type { Config } from '../createConfig.js'\nimport type { SelectChains } from '../types/chain.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { UnionExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type PrepareTransactionRequestOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n> = UnionExactPartial<\n  PrepareTransactionRequestParameters<config, chainId, request>\n> &\n  ScopeKeyParameter\n\nexport function prepareTransactionRequestQueryOptions<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n>(\n  config: config,\n  options: PrepareTransactionRequestOptions<\n    config,\n    chainId,\n    request\n  > = {} as any,\n) {\n  return {\n    queryFn({ queryKey }) {\n      const { scopeKey: _, to, ...parameters } = queryKey[1]\n      if (!to) throw new Error('to is required')\n      return prepareTransactionRequest(config, {\n        to,\n        ...(parameters as any),\n      }) as unknown as Promise<\n        PrepareTransactionRequestQueryFnData<config, chainId, request>\n      >\n    },\n    queryKey: prepareTransactionRequestQueryKey(options),\n  } as const satisfies QueryOptions<\n    PrepareTransactionRequestQueryFnData<config, chainId, request>,\n    PrepareTransactionRequestErrorType,\n    PrepareTransactionRequestData<config, chainId, request>,\n    PrepareTransactionRequestQueryKey<config, chainId, request>\n  >\n}\nexport type PrepareTransactionRequestQueryFnData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n> = PrepareTransactionRequestReturnType<config, chainId, request>\n\nexport type PrepareTransactionRequestData<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n> = PrepareTransactionRequestQueryFnData<config, chainId, request>\n\nexport function prepareTransactionRequestQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n>(options: PrepareTransactionRequestOptions<config, chainId, request>) {\n  return ['prepareTransactionRequest', filterQueryOptions(options)] as const\n}\n\nexport type PrepareTransactionRequestQueryKey<\n  config extends Config,\n  chainId extends config['chains'][number]['id'] | undefined,\n  request extends viem_PrepareTransactionRequestRequest<\n    SelectChains<config, chainId>[0],\n    SelectChains<config, chainId>[0]\n  >,\n> = ReturnType<\n  typeof prepareTransactionRequestQueryKey<config, chainId, request>\n>\n"],"mappings":"AAIA,SAIEA,yBAAyB,QACpB,yCAAyC;AAKhD,SAASC,kBAAkB,QAAQ,YAAY;AAc/C,OAAM,SAAUC,qCAAqCA,CAQnDC,MAAc,EAKD;EAAA,IAJbC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAII,EAAS;EAEb,OAAO;IACLG,OAAOA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAQ,CAAE,GAAAD,IAAA;MAClB,MAAM;QAAEE,QAAQ,EAAEC,CAAC;QAAEC,EAAE;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MACtD,IAAI,CAACG,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,gBAAgB,CAAC;MAC1C,OAAOf,yBAAyB,CAACG,MAAM,EAAE;QACvCU,EAAE;QACF,GAAIC;OACL,CAEA;IACH,CAAC;IACDJ,QAAQ,EAAEM,iCAAiC,CAACZ,OAAO;GAMpD;AACH;AAmBA,OAAM,SAAUY,iCAAiCA,CAO/CZ,OAAmE;EACnE,OAAO,CAAC,2BAA2B,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC5E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}