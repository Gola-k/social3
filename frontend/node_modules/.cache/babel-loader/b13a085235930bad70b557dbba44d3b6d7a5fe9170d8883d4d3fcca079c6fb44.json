{"ast":null,"code":"export const n6 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 6\n});\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 4\n});\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\n\n/**\n * Returns a string of form \"abc...xyz\"\n * @param {string} str string to string\n * @param {number} n number of chars to keep at front/end\n * @returns {string}\n */\nexport const getEllipsisTxt = (str, n = 6) => {\n  if (str) {\n    return `${str.slice(0, n)}...${str.slice(str.length - n)}`;\n  }\n  return \"\";\n};\nexport const tokenValue = (value, decimals) => decimals ? value / Math.pow(10, decimals) : value;\n\n/**\n * Return a formatted string with the symbol at the end\n * @param {number} value integer value\n * @param {number} decimals number of decimals\n * @param {string} symbol token symbol\n * @returns {string}\n */\nexport const tokenValueTxt = (value, decimals, symbol) => `${n4.format(tokenValue(value, decimals))} ${symbol}`;","map":{"version":3,"names":["n6","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","n4","c2","currency","getEllipsisTxt","str","n","slice","length","tokenValue","value","decimals","Math","pow","tokenValueTxt","symbol","format"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/src/helpers/formatters.js"],"sourcesContent":["export const n6 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 6,\n});\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 4,\n});\n\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\n/**\n * Returns a string of form \"abc...xyz\"\n * @param {string} str string to string\n * @param {number} n number of chars to keep at front/end\n * @returns {string}\n */\nexport const getEllipsisTxt = (str, n = 6) => {\n  if (str) {\n    return `${str.slice(0, n)}...${str.slice(str.length - n)}`;\n  }\n  return \"\";\n};\n\nexport const tokenValue = (value, decimals) =>\n  decimals ? value / Math.pow(10, decimals) : value;\n\n/**\n * Return a formatted string with the symbol at the end\n * @param {number} value integer value\n * @param {number} decimals number of decimals\n * @param {string} symbol token symbol\n * @returns {string}\n */\nexport const tokenValueTxt = (value, decimals, symbol) =>\n  `${n4.format(tokenValue(value, decimals))} ${symbol}`;\n"],"mappings":"AAAA,OAAO,MAAMA,EAAE,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EAC/CC,KAAK,EAAE,SAAS;EAChBC,qBAAqB,EAAE,CAAC;EACxBC,qBAAqB,EAAE;AACzB,CAAC,CAAC;AACF,OAAO,MAAMC,EAAE,GAAG,IAAIL,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EAC/CC,KAAK,EAAE,SAAS;EAChBC,qBAAqB,EAAE,CAAC;EACxBC,qBAAqB,EAAE;AACzB,CAAC,CAAC;AAEF,OAAO,MAAME,EAAE,GAAG,IAAIN,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EAC/CC,KAAK,EAAE,UAAU;EACjBK,QAAQ,EAAE,KAAK;EACfJ,qBAAqB,EAAE,CAAC;EACxBC,qBAAqB,EAAE;AACzB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAGA,CAACC,GAAG,EAAEC,CAAC,GAAG,CAAC,KAAK;EAC5C,IAAID,GAAG,EAAE;IACP,OAAO,GAAGA,GAAG,CAACE,KAAK,CAAC,CAAC,EAAED,CAAC,CAAC,MAAMD,GAAG,CAACE,KAAK,CAACF,GAAG,CAACG,MAAM,GAAGF,CAAC,CAAC,EAAE;EAC5D;EACA,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMG,UAAU,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KACxCA,QAAQ,GAAGD,KAAK,GAAGE,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEF,QAAQ,CAAC,GAAGD,KAAK;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,aAAa,GAAGA,CAACJ,KAAK,EAAEC,QAAQ,EAAEI,MAAM,KACnD,GAAGd,EAAE,CAACe,MAAM,CAACP,UAAU,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAAC,IAAII,MAAM,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}