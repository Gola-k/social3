{"ast":null,"code":"'use client';\n\nimport { getProofQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useProof */\nexport function useProof() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    address,\n    storageKeys,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getProofQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(address && storageKeys && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getProofQueryOptions","useQuery","useChainId","useConfig","useProof","parameters","arguments","length","undefined","address","storageKeys","query","config","chainId","options","enabled","Boolean"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useProof.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetProofErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetProofData,\n  type GetProofOptions,\n  type GetProofQueryKey,\n  getProofQueryOptions,\n} from '@wagmi/core/query'\nimport type { GetProofQueryFnData } from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseProofParameters<\n  config extends Config = Config,\n  selectData = GetProofData,\n> = Compute<\n  GetProofOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetProofQueryFnData,\n      GetProofErrorType,\n      selectData,\n      GetProofQueryKey<config>\n    >\n>\n\nexport type UseProofReturnType<selectData = GetProofData> = UseQueryReturnType<\n  selectData,\n  GetProofErrorType\n>\n\n/** https://wagmi.sh/react/api/hooks/useProof */\nexport function useProof<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetProofData,\n>(\n  parameters: UseProofParameters<config, selectData> = {},\n): UseProofReturnType<selectData> {\n  const { address, storageKeys, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getProofQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(address && storageKeys && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAIZ,SAIEA,oBAAoB,QACf,mBAAmB;AAI1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAqB1C;AACA,OAAM,SAAUC,QAAQA,CAAA,EAIiC;EAAA,IAAvDC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqD,EAAE;EAEvD,MAAM;IAAEG,OAAO;IAAEC,WAAW;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGN,UAAU;EAEvD,MAAMO,MAAM,GAAGT,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMQ,OAAO,GAAGX,UAAU,CAAC;IAAEU;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGd,oBAAoB,CAACY,MAAM,EAAE;IAC3C,GAAGP,UAAU;IACbQ,OAAO,EAAER,UAAU,CAACQ,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CAACP,OAAO,IAAIC,WAAW,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAAC;EAE1E,OAAOd,QAAQ,CAAC;IAAE,GAAGU,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}