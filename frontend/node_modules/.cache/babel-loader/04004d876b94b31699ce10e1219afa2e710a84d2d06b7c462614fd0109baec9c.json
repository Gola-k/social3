{"ast":null,"code":"import { readContract } from '../actions/readContract.js';\nimport { filterQueryOptions } from './utils.js';\nexport function readContractQueryOptions(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    // TODO: Support `signal` once Viem actions allow passthrough\n    // https://tkdodo.eu/blog/why-you-want-react-query#bonus-cancellation\n    async queryFn(_ref) {\n      let {\n        queryKey\n      } = _ref;\n      const abi = options.abi;\n      if (!abi) throw new Error('abi is required');\n      const {\n        address,\n        functionName,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      if (!functionName) throw new Error('functionName is required');\n      const args = parameters.args;\n      return readContract(config, {\n        abi,\n        address,\n        functionName,\n        args,\n        ...parameters\n      });\n    },\n    queryKey: readContractQueryKey(options)\n  };\n}\nexport function readContractQueryKey() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    abi: _,\n    ...rest\n  } = options;\n  return ['readContract', filterQueryOptions(rest)];\n}","map":{"version":3,"names":["readContract","filterQueryOptions","readContractQueryOptions","config","options","arguments","length","undefined","queryFn","_ref","queryKey","abi","Error","address","functionName","scopeKey","_","parameters","args","readContractQueryKey","rest"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/core/src/query/readContract.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\n\nimport {\n  type ReadContractErrorType,\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../actions/readContract.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { UnionExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type ReadContractOptions<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = UnionExactPartial<ReadContractParameters<abi, functionName, args, config>> &\n  ScopeKeyParameter\n\nexport function readContractQueryOptions<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(\n  config: config,\n  options: ReadContractOptions<abi, functionName, args, config> = {} as any,\n) {\n  return {\n    // TODO: Support `signal` once Viem actions allow passthrough\n    // https://tkdodo.eu/blog/why-you-want-react-query#bonus-cancellation\n    async queryFn({ queryKey }) {\n      const abi = options.abi as Abi\n      if (!abi) throw new Error('abi is required')\n      const { address, functionName, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      if (!functionName) throw new Error('functionName is required')\n      const args = parameters.args as readonly unknown[]\n      return readContract(config, {\n        abi,\n        address,\n        functionName,\n        args,\n        ...parameters,\n      }) as Promise<ReadContractData<abi, functionName, args>>\n    },\n    queryKey: readContractQueryKey(options as any) as any,\n  } as const satisfies QueryOptions<\n    ReadContractQueryFnData<abi, functionName, args>,\n    ReadContractErrorType,\n    ReadContractData<abi, functionName, args>,\n    ReadContractQueryKey<abi, functionName, args, config>\n  >\n}\n\nexport type ReadContractQueryFnData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractReturnType<abi, functionName, args>\n\nexport type ReadContractData<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n> = ReadContractQueryFnData<abi, functionName, args>\n\nexport function readContractQueryKey<\n  config extends Config,\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n>(options: ReadContractOptions<abi, functionName, args, config> = {} as any) {\n  const { abi: _, ...rest } = options\n  return ['readContract', filterQueryOptions(rest)] as const\n}\n\nexport type ReadContractQueryKey<\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  config extends Config,\n> = ReturnType<typeof readContractQueryKey<config, abi, functionName, args>>\n"],"mappings":"AAGA,SAIEA,YAAY,QACP,4BAA4B;AAInC,SAASC,kBAAkB,QAAQ,YAAY;AAU/C,OAAM,SAAUC,wBAAwBA,CAMtCC,MAAc,EAC2D;EAAA,IAAzEC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgE,EAAS;EAEzE,OAAO;IACL;IACA;IACA,MAAMG,OAAOA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAQ,CAAE,GAAAD,IAAA;MACxB,MAAME,GAAG,GAAGP,OAAO,CAACO,GAAU;MAC9B,IAAI,CAACA,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MAC5C,MAAM;QAAEC,OAAO;QAAEC,YAAY;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGP,QAAQ,CAAC,CAAC,CAAC;MACzE,IAAI,CAACG,OAAO,EAAE,MAAM,IAAID,KAAK,CAAC,qBAAqB,CAAC;MACpD,IAAI,CAACE,YAAY,EAAE,MAAM,IAAIF,KAAK,CAAC,0BAA0B,CAAC;MAC9D,MAAMM,IAAI,GAAGD,UAAU,CAACC,IAA0B;MAClD,OAAOlB,YAAY,CAACG,MAAM,EAAE;QAC1BQ,GAAG;QACHE,OAAO;QACPC,YAAY;QACZI,IAAI;QACJ,GAAGD;OACJ,CAAuD;IAC1D,CAAC;IACDP,QAAQ,EAAES,oBAAoB,CAACf,OAAc;GAM9C;AACH;AAcA,OAAM,SAAUe,oBAAoBA,CAAA,EAKuC;EAAA,IAAzEf,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgE,EAAS;EACzE,MAAM;IAAEM,GAAG,EAAEK,CAAC;IAAE,GAAGI;EAAI,CAAE,GAAGhB,OAAO;EACnC,OAAO,CAAC,cAAc,EAAEH,kBAAkB,CAACmB,IAAI,CAAC,CAAU;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}