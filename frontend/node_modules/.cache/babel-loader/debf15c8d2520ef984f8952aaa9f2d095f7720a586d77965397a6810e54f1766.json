{"ast":null,"code":"import { getProof } from '../actions/getProof.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getProofQueryOptions(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    async queryFn(_ref) {\n      let {\n        queryKey\n      } = _ref;\n      const {\n        address,\n        scopeKey: _,\n        storageKeys,\n        ...parameters\n      } = queryKey[1];\n      if (!address || !storageKeys) throw new Error('address and storageKeys are required');\n      return getProof(config, {\n        ...parameters,\n        address,\n        storageKeys\n      });\n    },\n    queryKey: getProofQueryKey(options)\n  };\n}\nexport function getProofQueryKey(options) {\n  return ['getProof', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getProof","filterQueryOptions","getProofQueryOptions","config","options","arguments","length","undefined","queryFn","_ref","queryKey","address","scopeKey","_","storageKeys","parameters","Error","getProofQueryKey"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/core/src/query/getProof.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetProofErrorType,\n  type GetProofParameters,\n  type GetProofReturnType,\n  getProof,\n} from '../actions/getProof.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetProofOptions<config extends Config> = Compute<\n  ExactPartial<GetProofParameters<config>> & ScopeKeyParameter\n>\n\nexport function getProofQueryOptions<config extends Config>(\n  config: config,\n  options: GetProofOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, storageKeys, ...parameters } = queryKey[1]\n      if (!address || !storageKeys)\n        throw new Error('address and storageKeys are required')\n      return getProof(config, { ...parameters, address, storageKeys })\n    },\n    queryKey: getProofQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetProofQueryFnData,\n    GetProofErrorType,\n    GetProofData,\n    GetProofQueryKey<config>\n  >\n}\n\nexport type GetProofQueryFnData = GetProofReturnType\n\nexport type GetProofData = GetProofQueryFnData\n\nexport function getProofQueryKey<config extends Config>(\n  options: GetProofOptions<config>,\n) {\n  return ['getProof', filterQueryOptions(options)] as const\n}\n\nexport type GetProofQueryKey<config extends Config> = ReturnType<\n  typeof getProofQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,QAAQ,QACH,wBAAwB;AAI/B,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,oBAAoBA,CAClCC,MAAc,EACuB;EAAA,IAArCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EAErC,OAAO;IACL,MAAMG,OAAOA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAQ,CAAE,GAAAD,IAAA;MACxB,MAAM;QAAEE,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAEC,WAAW;QAAE,GAAGC;MAAU,CAAE,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACxE,IAAI,CAACC,OAAO,IAAI,CAACG,WAAW,EAC1B,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;MACzD,OAAOhB,QAAQ,CAACG,MAAM,EAAE;QAAE,GAAGY,UAAU;QAAEJ,OAAO;QAAEG;MAAW,CAAE,CAAC;IAClE,CAAC;IACDJ,QAAQ,EAAEO,gBAAgB,CAACb,OAAO;GAMnC;AACH;AAMA,OAAM,SAAUa,gBAAgBA,CAC9Bb,OAAgC;EAEhC,OAAO,CAAC,UAAU,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}