{"ast":null,"code":"var _jsxFileName = \"/Users/siddharthpranay/Desktop/projects/Chirping/frontend/src/components/Hompage.js\";\nimport React, { useState, useEffect } from \"react\";\n// import Moralis from \"moralis\";\n// import { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"../helpers/formatters\";\nimport contractABI from \"../contract/ChirpingABI.json\";\nimport LeftSideBar from \"./LeftSideBar\";\nimport RightSideBar from \"./RightSideBar\";\nimport AllChirpings from \"./AllChirpings\";\nimport config from \"../config/config\";\nimport ChirpingText from \"../assets/images/ChirpingText.png\";\nimport ChirpingLogo from \"../assets/logos/ChirpingLogo.png\";\nimport Close from \"../assets/images/Close.png\";\nimport ReactModal from \"react-modal\";\nimport MyProfile from \"./MyProfile\";\nimport { Link } from \"react-router-dom\";\nimport LogoAnimation from \"../assets/images/LogoAnimation.gif\";\nimport Spinner from \"../assets/images/Spinner.gif\";\nimport CreatorProfile from \"./CreatorProfile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Homepage = () => {\n  // Moralis.initialize(\"DhIkCD6RgzXux1tHt61zUUfy05Qw6YDg7P4F77TI\");\n  // Moralis.serverURL = \"https://odzn6qu9o4zo.usemoralis.com:2053/server\";\n\n  // const { authenticate, isAuthenticated, user, logout } = useMoralis();\n  // const displayPicture =\n  //   \"https://ipfs.moralis.io:2053/ipfs/QmeRcZfbJJD4To5hxsTiDyuUDYVTppg4RYnnMozSaJDMR3\";\n\n  // const [formData, setFormData] = useState({\n  //   desp: \"\",\n  //   imageFile: undefined,\n  // });\n\n  // const [addPictureData, setAddPictureData] = useState({\n  //   imageFile: undefined,\n  // });\n\n  // const [navStatus, setNavStatus] = useState({\n  //   home: true,\n  //   myChirpings: false,\n  //   myCagedChirpings: false,\n  //   myProfile: false,\n  //   creatorProfile: false,\n  // });\n\n  // const [random, setRandom] = useState(false);\n  // const [promoteLevelModal, setPromoteLevelModal] = useState(false);\n  // const [chirpingModal, setChirpingModal] = useState(false);\n  // const [addNameData, setAddNameData] = useState({\n  //   name: \"\",\n  // });\n  // const [loading, setLoading] = useState(false);\n  // const [promoteLevelStatus, setpromoteLevelStatus] = useState(false);\n  // const [allChirpings, setAllChirpings] = useState([]);\n  // const [myChirpings, setMyChirpings] = useState([]);\n  // const [myCagedChirpings, setMyCagedChirpings] = useState([]);\n  // const [instructionModal, setInstructionModal] = useState(false);\n  // const [currUser, setCurrUser] = useState();\n  // const [userData, setUserData] = useState({\n  //   username: \"\",\n  //   totalChirpings: 0,\n  //   totalWings: 0,\n  //   totalCages: 0,\n  //   level: 0,\n  // });\n  // const [currCreator, setCurrCreator] = useState();\n\n  // // useEffect(() => {\n  // //   const enableWeb3 = async () => {\n  // //     await Moralis.enableWeb3();\n  // //     setRandom(true);\n  // //   };\n  // //   enableWeb3();\n  // // }, []);\n\n  // // useEffect(() => {\n  // //   const getData = async () => {\n  // //     const options = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"showCurrUser\",\n  // //       params: {\n  // //         user: user.get(\"ethAddress\"),\n  // //       },\n  // //     };\n\n  // //     const currentUser = await Moralis.executeFunction(options);\n  // //     console.log(currentUser);\n\n  // //     setCurrUser(currentUser);\n  // //     setUserData({\n  // //       ...userData,\n  // //       username: currentUser.username.toString(),\n  // //       totalChirpings: currentUser.totalChirpings.toNumber(),\n  // //       totalWings: currentUser.totalWings.toNumber(),\n  // //       totalCages: currentUser.totalCages.toNumber(),\n  // //       level: currentUser.level.toNumber(),\n  // //     });\n\n  // //     const options2 = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"getAllChirpings\",\n  // //     };\n\n  // //     const allChirpings = await Moralis.executeFunction(options2);\n  // //     setAllChirpings(allChirpings);\n\n  // //     const options3 = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"getMyChirpings\",\n  // //       params: {\n  // //         user: user.get(\"ethAddress\"),\n  // //       },\n  // //     };\n\n  // //     const myChirpings = await Moralis.executeFunction(options3);\n  // //     setMyChirpings(myChirpings);\n\n  // //     const options4 = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"getCagedChirpings\",\n  // //       params: {\n  // //         user: user.get(\"ethAddress\"),\n  // //       },\n  // //     };\n\n  // //     const myCagedChirpings = await Moralis.executeFunction(options4);\n  // //     setMyCagedChirpings(myCagedChirpings);\n  // //   };\n\n  // //   if (isAuthenticated && random) {\n  // //     getData();\n  // //     console.log(user.get(\"ethAddress\"));\n  // //   }\n  // // }, [user, isAuthenticated, random]);\n\n  // const getCreatorData = async (_creator) => {\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"showCurrUser\",\n  //     params: {\n  //       user: _creator,\n  //     },\n  //   };\n\n  //   const x = await Moralis.executeFunction(options);\n  //   return x;\n  // };\n\n  // const givingWings = async (chirpingId) => {\n  //   try {\n  //     const options = {\n  //       contractAddress: config.contractAddress,\n  //       abi: contractABI,\n  //       functionName: \"givingWings\",\n  //       params: {\n  //         _chirpingId: chirpingId,\n  //       },\n  //     };\n\n  //     const transaction = await Moralis.executeFunction(options);\n  //     setLoading(true);\n  //     await transaction.wait();\n  //     setLoading(false);\n  //     window.location.reload();\n  //   } catch (err) {\n  //     alert(err.data.message);\n  //   }\n  // };\n\n  // const wingsGiven = async (chirpingId) => {\n  //   const readOptions = {\n  //     contractAddress: config.contractAddress,\n  //     functionName: \"wingsGivenCheck\",\n  //     abi: contractABI,\n  //     params: {\n  //       _chirpingId: chirpingId,\n  //       _user: currUser.username,\n  //     },\n  //   };\n\n  //   const result = await Moralis.executeFunction(readOptions);\n  //   return result;\n  // };\n\n  // const givingCage = async (uId) => {\n  //   setLoading(true);\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"givingCage\",\n  //     params: {\n  //       _chirpingId: uId,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n  // };\n\n  // const cagesGiven = async (chirpingId) => {\n  //   const readOptions = {\n  //     contractAddress: config.contractAddress,\n  //     functionName: \"cagesGivenCheck\",\n  //     abi: contractABI,\n  //     params: {\n  //       _chirpingId: chirpingId,\n  //       _user: currUser.username,\n  //     },\n  //   };\n\n  //   const result = await Moralis.executeFunction(readOptions);\n  //   return result;\n  // };\n\n  // const promoteLevel = async (username) => {\n  //   setLoading(true);\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"promoteLevel\",\n  //     params: {\n  //       user: username,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setpromoteLevelStatus(true);\n  //   setLoading(false);\n  //   console.log(\"Level status has been updated\");\n  // };\n\n  // const promoteLevelCheck = () => {\n  //   if (\n  //     currUser.totalChirpings >= 10 &&\n  //     currUser.totalChirpings < 20 &&\n  //     currUser.totalWings >= 20 &&\n  //     currUser.level === 0\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 20 &&\n  //     currUser.totalChirpings < 30 &&\n  //     currUser.totalWings >= 40 &&\n  //     user.level < 2\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 30 &&\n  //     currUser.totalChirpings < 50 &&\n  //     currUser.totalWings >= 60 &&\n  //     currUser.level < 3\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 50 &&\n  //     currUser.totalChirpings < 70 &&\n  //     currUser.totalWings >= 80 &&\n  //     currUser.level < 4\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 70 &&\n  //     currUser.totalChirpings < 100 &&\n  //     currUser.totalWings >= 100 &&\n  //     currUser.level < 5\n  //   ) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // };\n\n  // const addingName = async () => {\n  //   setLoading(true);\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"addName\",\n  //     params: {\n  //       _name: addNameData.name,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n  // };\n\n  // const addUser = async (username) => {\n  //   try {\n  //     const options = {\n  //       contractAddress: config.contractAddress,\n  //       abi: contractABI,\n  //       functionName: \"addUser\",\n  //       params: {\n  //         user: username,\n  //         displayPicture: displayPicture,\n  //       },\n  //     };\n  //     const transaction = await Moralis.executeFunction(options);\n  //     setLoading(true);\n  //     await transaction.wait();\n  //     setLoading(false);\n  //     window.location.reload();\n  //     console.log(\"User has been added\");\n  //     setInstructionModal(true);\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  // const login = async () => {\n  //   if (!isAuthenticated) {\n  //     setLoading(true);\n  //     await authenticate({ signingMessage: \"Log in using Moralis\" })\n  //       .then(async function (user) {\n  //         console.log(user.get(\"ethAddress\"));\n  //         const username = user.get(\"ethAddress\");\n  //         setLoading(true);\n  //         addUser(username);\n  //       })\n  //       .catch(function (error) {\n  //         console.log(error);\n  //       });\n  //   } else {\n  //     console.log(\"Already logged In\");\n  //   }\n  //   setLoading(false);\n  // };\n\n  // const logOut = async () => {\n  //   await logout();\n  //   window.location.reload();\n  //   console.log(\"logged out\");\n  // };\n\n  // const uploadImage = async () => {\n  //   const data = formData.imageFile[0];\n  //   const file = new Moralis.File(data.name, data);\n  //   await file.saveIPFS();\n  //   return file.ipfs();\n  // };\n\n  // const uploadDisplayPicture = async () => {\n  //   const data = addPictureData.imageFile[0];\n  //   const file = new Moralis.File(data.name, data);\n  //   await file.saveIPFS();\n  //   return file.ipfs();\n  // };\n\n  // const settingImageURL = async () => {\n  //   let imageUrl = \"\";\n  //   if (currUser.level >= 5) {\n  //     if (formData.imageFile === undefined) {\n  //       return imageUrl;\n  //     } else {\n  //       const imageURL = await uploadImage();\n  //       return imageURL;\n  //     }\n  //   } else {\n  //     return imageUrl;\n  //   }\n  // };\n\n  // const settingDisplayPictureURL = async () => {\n  //   if (currUser.level >= 5) {\n  //     const imageURL = await uploadDisplayPicture();\n  //     return imageURL;\n  //   }\n  // };\n\n  // const addChirping = async () => {\n  //   setLoading(true);\n\n  //   const imageUrl = await settingImageURL();\n\n  //   const strLen = formData.desp.length;\n\n  //   const metadata = {\n  //     chirpingText: formData.desp,\n  //     imageURL: imageUrl,\n  //   };\n  //   const file = new Moralis.File(\"file.json\", {\n  //     base64: btoa(JSON.stringify(metadata)),\n  //   });\n\n  //   await file.saveIPFS();\n  //   const dataUrl = file.ipfs();\n  //   console.log(dataUrl);\n\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"addChirping\",\n  //     params: {\n  //       _numOfCharacters: strLen,\n  //       _chirpingText: dataUrl,\n  //       _chirpingImage: dataUrl,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n\n  //   console.log(\"executed\");\n  // };\n\n  // const addPicture = async () => {\n  //   setLoading(true);\n  //   const imageURL = await settingDisplayPictureURL();\n\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"changeDisplayPicture\",\n  //     params: {\n  //       _imageURL: imageURL,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n  // };\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"mainBg\">\n    //   <div\n    //     style={{\n    //       display: \"flex\",\n    //       flexDirection: \"column\",\n    //       alignItems: \"center\",\n    //       padding: \"2rem 2rem 0rem 2rem\",\n    //     }}\n    //   >\n    //     <ReactModal\n    //       className=\"loading\"\n    //       style={{\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //           backdropFilter: \"blur(5px)\",\n    //         },\n    //       }}\n    //       isOpen={loading}\n    //     >\n    //       <img\n    //         alt=\"Logo Animation\"\n    //         src={ChirpingLogo}\n    //         style={{\n    //           width: \"12rem\",\n    //           position: \"absolute\",\n    //           top: \"35%\",\n    //           right: \"45%\",\n    //         }}\n    //       ></img>\n    //     </ReactModal>\n    //     <ReactModal\n    //       className=\"addPictureModal\"\n    //       style={{\n    //         width: \"20rem\",\n    //         height: \"15rem\",\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //         },\n    //       }}\n    //       isOpen={promoteLevelModal}\n    //       onRequestClose={() => {\n    //         setPromoteLevelModal(false);\n    //       }}\n    //     >\n    //       <div\n    //         style={{ position: \"absolute\", right: \"1rem\", top: \"1rem\" }}\n    //         onClick={() => {\n    //           setPromoteLevelModal(false);\n    //         }}\n    //       >\n    //         <img\n    //           alt=\"Close\"\n    //           src={Close}\n    //           style={{ width: \"1.5rem\", marginRight: \"1rem\" }}\n    //         ></img>\n    //       </div>\n    //       <div\n    //         style={{\n    //           display: \"flex\",\n    //           flexDirection: \"column\",\n    //           justifyContent: \"center\",\n    //           alignItems: \"center\",\n    //           height: \"100%\",\n    //         }}\n    //       >\n    //         {promoteLevelStatus ? (\n    //           <span className=\"text\" style={{ fontSize: \"32px\" }}>\n    //             You've Been Promoted\n    //           </span>\n    //         ) : (\n    //           <span className=\"text\" style={{ fontSize: \"32px\" }}>\n    //             Processing, please wait!\n    //           </span>\n    //         )}\n    //       </div>\n    //     </ReactModal>\n    //     <ReactModal\n    //       className=\"chirpingModal\"\n    //       style={{\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //         },\n    //       }}\n    //       isOpen={chirpingModal}\n    //       onRequestClose={() => {\n    //         setChirpingModal(false);\n    //       }}\n    //     >\n    //       <div\n    //         style={{ position: \"absolute\", right: \"1rem\", top: \"1rem\" }}\n    //         onClick={() => {\n    //           setChirpingModal(false);\n    //         }}\n    //       >\n    //         <img\n    //           alt=\"Close\"\n    //           src={Close}\n    //           style={{ width: \"2rem\", marginRight: \"1rem\" }}\n    //         ></img>\n    //       </div>\n    //       <form\n    //         style={{\n    //           display: \"flex\",\n    //           flexDirection: \"column\",\n    //           justifyContent: \"center\",\n    //           alignItems: \"center\",\n    //         }}\n    //         onSubmit={() => {\n    //           setChirpingModal(false);\n    //           addChirping();\n    //         }}\n    //       >\n    //         <textarea\n    //           className=\"textfield\"\n    //           style={{ width: \"30rem\", height: \"8rem\", marginTop: \"2rem\" }}\n    //           type=\"text\"\n    //           value={formData.desp}\n    //           placeholder=\"Chirp here!!\"\n    //           onChange={(e) => {\n    //             setFormData({ ...formData, desp: e.target.value });\n    //           }}\n    //         ></textarea>\n    //         <div\n    //           style={{\n    //             display: \"flex\",\n    //             flexDirection: \"row\",\n    //             justifyContent: \"start\",\n    //             alignItems: \"start\",\n    //             width: \"35rem\",\n    //           }}\n    //         >\n    //           {currUser ? (\n    //             currUser.level >= 5 ? (\n    //               <input\n    //                 className=\"textField\"\n    //                 type=\"file\"\n    //                 style={{ marginTop: \"2rem\", marginLeft: \"4rem\" }}\n    //                 onChange={(e) => {\n    //                   e.preventDefault();\n    //                   setFormData({ ...formData, imageFile: e.target.files });\n    //                 }}\n    //               ></input>\n    //             ) : (\n    //               <div></div>\n    //             )\n    //           ) : (\n    //             <div></div>\n    //           )}\n    //         </div>\n    //         <input\n    //           className=\"textfield\"\n    //           type=\"submit\"\n    //           style={{\n    //             width: \"10rem\",\n    //             height: \"3rem\",\n    //             fontSize: \"20px\",\n    //             marginTop: \"2rem\",\n    //           }}\n    //         ></input>\n    //       </form>\n    //     </ReactModal>\n    //     <ReactModal\n    //       className=\"chirpingModal\"\n    //       style={{\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //         },\n    //       }}\n    //       isOpen={instructionModal}\n    //       onRequestClose={() => {\n    //         setInstructionModal(false);\n    //       }}\n    //     >\n    //       <div\n    //         style={{ position: \"absolute\", right: \"1rem\", top: \"1rem\" }}\n    //         onClick={() => {\n    //           setInstructionModal(false);\n    //         }}\n    //       >\n    //         <img\n    //           alt=\"Close\"\n    //           src={Close}\n    //           style={{ width: \"2rem\", marginRight: \"1rem\" }}\n    //         ></img>\n    //       </div>\n    //       <div className=\"text\" style={{ fontSize: \"30px\" }}>\n    //         Instructions\n    //       </div>\n    //     </ReactModal>\n    //     {!user ?\n    //      (\n    //       <button className=\"connectWallet\" onClick={login}>\n    //         <span style={{ fontSize: \"22px\" }}>Connect Wallet</span>\n    //       </button>\n    //     ) : \n    //     (\n    //       <div>\n    //         <button className=\"connectWallet2\" onClick={logOut}>\n    //           <span style={{ fontSize: \"14px\" }}>Logout</span>\n    //         </button>\n    //         <div\n    //           className=\"displayPicture\"\n    //           style={{\n    //             display: \"flex\",\n    //             flexDirection: \"row\",\n    //             justifyContent: \"center\",\n    //             alignItems: \"center\",\n    //             overflow: \"hidden\",\n    //           }}\n    //         >\n    //           <img\n    //             alt=\"Profile\"\n    //             src={currUser ? currUser.displayPicture : displayPicture}\n    //             style={{\n    //               width: \"8rem\",\n    //               height: \"8rem\",\n    //             }}\n    //           ></img>\n    //         </div>\n    //       </div>\n    //     )}\n    //     <div\n    //       style={{\n    //         height: \"15vh\",\n    //         width: \"60%\",\n    //         display: \"flex\",\n    //         flexDirection: \"row\",\n    //         justifyContent: \"start\",\n    //         alignItems: \"center\",\n    //       }}\n    //     >\n    //       <Link to=\"/\">\n    //         <img\n    //           alt=\"Chirping logo\"\n    //           src={ChirpingLogo}\n    //           className=\"chirpingLogo\"\n    //         ></img>\n    //       </Link>\n    //       <img\n    //         alt=\"Chirping text\"\n    //         src={ChirpingText}\n    //         style={{\n    //           width: \"35rem\",\n    //           position: \"absolute\",\n    //           top: \"-3%\",\n    //           left: \"30%\",\n    //           right: \"25%\",\n    //         }}\n    //       ></img>\n    //     </div>\n    //     <div\n    //       style={{\n    //         height: \"75vh\",\n    //         width: \"100%\",\n    //         marginTop: \"2rem\",\n    //         display: \"flex\",\n    //         flexDirection: \"row\",\n    //         justifyContent: \"space-between\",\n    //         alignItems: \"center\",\n    //       }}\n    //     >\n    //       <div className=\"leftSideBar\">\n    //         {/* <button\n    //           onClick={() => {\n    //             // console.log(userData);\n    //             // console.log(allChirpings);\n    //             // console.log(myChirpings);\n    //             // console.log(myCagedChirpings);\n    //             // console.log(promoteLevelStatus);\n    //             console.log(currUser);\n    //           }}\n    //         >\n    //           CLick here\n    //         </button> */}\n    //         <LeftSideBar\n    //           currUser={currUser}\n    //           setChirpingModal={setChirpingModal}\n    //           setNavStatus={setNavStatus}\n    //           navStatus={navStatus}\n    //         />\n    //       </div>\n    //       <div className=\"middleBar\">\n    //         {user ? (\n    //           <div>\n    //             {navStatus.home ? (\n    //               <div\n    //                 style={{\n    //                   display: \"flex\",\n    //                   flexDirection: \"column\",\n    //                   alignItems: \"center\",\n    //                 }}\n    //               >\n    //                 {allChirpings\n    //                   .map((chirping) => (\n    //                     <AllChirpings\n    //                       key={chirping.chirpingId}\n    //                       chirping={chirping}\n    //                       givingCage={() => {\n    //                         givingCage(chirping.chirpingId);\n    //                       }}\n    //                       givingWings={async () => {\n    //                         await givingWings(chirping.chirpingId);\n    //                       }}\n    //                       wingsGivenCheck={async () => {\n    //                         const x = await wingsGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       cagesGivenCheck={async () => {\n    //                         const x = await cagesGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       getCreatorData={async () => {\n    //                         const x = await getCreatorData(chirping.creator);\n    //                         return x;\n    //                       }}\n    //                       setNavStatus={setNavStatus}\n    //                       setCurrCreator={setCurrCreator}\n    //                     />\n    //                   ))\n    //                   .reverse()}\n    //               </div>\n    //             ) : navStatus.myChirpings ? (\n    //               <div\n    //                 style={{\n    //                   display: \"flex\",\n    //                   flexDirection: \"column\",\n    //                   alignItems: \"center\",\n    //                 }}\n    //               >\n    //                 {myChirpings\n    //                   .map((chirping) => (\n    //                     <AllChirpings\n    //                       key={chirping.chirpingId}\n    //                       chirping={chirping}\n    //                       givingCage={() => {\n    //                         givingCage(chirping.chirpingId);\n    //                       }}\n    //                       givingWings={() => {\n    //                         givingWings(chirping.chirpingId);\n    //                       }}\n    //                       wingsGivenCheck={async () => {\n    //                         const x = await wingsGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       cagesGivenCheck={async () => {\n    //                         const x = await cagesGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       getCreatorData={async () => {\n    //                         const x = await getCreatorData(chirping.creator);\n    //                         return x;\n    //                       }}\n    //                       setNavStatus={setNavStatus}\n    //                       setCurrCreator={setCurrCreator}\n    //                     />\n    //                   ))\n    //                   .reverse()}\n    //               </div>\n    //             ) : navStatus.myCagedChirpings ? (\n    //               <div\n    //                 style={{\n    //                   display: \"flex\",\n    //                   flexDirection: \"column\",\n    //                   alignItems: \"center\",\n    //                 }}\n    //               >\n    //                 {myCagedChirpings\n    //                   .map((chirping) => (\n    //                     <AllChirpings\n    //                       key={chirping.chirpingId}\n    //                       chirping={chirping}\n    //                       givingCage={() => {\n    //                         givingCage(chirping.chirpingId);\n    //                       }}\n    //                       givingWings={() => {\n    //                         givingWings(chirping.chirpingId);\n    //                       }}\n    //                       wingsGivenCheck={async () => {\n    //                         const x = await wingsGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       cagesGivenCheck={async () => {\n    //                         const x = await cagesGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       getCreatorData={async () => {\n    //                         const x = await getCreatorData(chirping.creator);\n    //                         return x;\n    //                       }}\n    //                       setCurrCreator={setCurrCreator}\n    //                     />\n    //                   ))\n    //                   .reverse()}\n    //               </div>\n    //             ) : navStatus.myProfile ? (\n    //               <MyProfile\n    //                 currUser={currUser}\n    //                 addPicture={addPicture}\n    //                 setAddPictureData={setAddPictureData}\n    //                 addPictureData={addPictureData}\n    //                 addNameData={addNameData}\n    //                 setAddNameData={setAddNameData}\n    //                 addingName={addingName}\n    //               />\n    //             ) : navStatus.creatorProfile ? (\n    //               <CreatorProfile\n    //                 currCreator={async () => {\n    //                   const x = await getCreatorData(currCreator);\n    //                   return x;\n    //                 }}\n    //               />\n    //             ) : (\n    //               <div>Something Else</div>\n    //             )}\n    //           </div>\n    //         ) : \n    //         (\n    //           <div\n    //             className=\"text\"\n    //             style={{\n    //               display: \"flex\",\n    //               flexDirection: \"column\",\n    //               justifyContent: \"center\",\n    //               alignItems: \"center\",\n    //               height: \"40vh\",\n    //               fontSize: \"50px\",\n    //             }}\n    //           >\n    //             Please Connect Your Wallet\n    //           </div>\n    //         )}\n    //       </div>\n    //       <div style={{ height: \"100%\", width: \"25%\" }}>\n    //         <RightSideBar\n    //           currUser={currUser}\n    //           setPromoteLevelModal={setPromoteLevelModal}\n    //           promoteLevel={promoteLevel}\n    //           promoteLevelCheck={() => {\n    //             const x = promoteLevelCheck();\n    //             return x;\n    //           }}\n    //         />\n    //       </div>\n    //     </div>\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: \"Welcome to home page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Homepage;\nexport default Homepage;\nvar _c;\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"names":["React","useState","useEffect","getEllipsisTxt","contractABI","LeftSideBar","RightSideBar","AllChirpings","config","ChirpingText","ChirpingLogo","Close","ReactModal","MyProfile","Link","LogoAnimation","Spinner","CreatorProfile","jsxDEV","_jsxDEV","Homepage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/src/components/Hompage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import Moralis from \"moralis\";\n// import { useMoralis } from \"react-moralis\";\nimport { getEllipsisTxt } from \"../helpers/formatters\";\nimport contractABI from \"../contract/ChirpingABI.json\";\nimport LeftSideBar from \"./LeftSideBar\";\nimport RightSideBar from \"./RightSideBar\";\nimport AllChirpings from \"./AllChirpings\";\nimport config from \"../config/config\";\nimport ChirpingText from \"../assets/images/ChirpingText.png\";\nimport ChirpingLogo from \"../assets/logos/ChirpingLogo.png\";\nimport Close from \"../assets/images/Close.png\";\nimport ReactModal from \"react-modal\";\nimport MyProfile from \"./MyProfile\";\nimport { Link } from \"react-router-dom\";\nimport LogoAnimation from \"../assets/images/LogoAnimation.gif\";\nimport Spinner from \"../assets/images/Spinner.gif\";\nimport CreatorProfile from \"./CreatorProfile\";\n\nconst Homepage = () => {\n  // Moralis.initialize(\"DhIkCD6RgzXux1tHt61zUUfy05Qw6YDg7P4F77TI\");\n  // Moralis.serverURL = \"https://odzn6qu9o4zo.usemoralis.com:2053/server\";\n\n  // const { authenticate, isAuthenticated, user, logout } = useMoralis();\n  // const displayPicture =\n  //   \"https://ipfs.moralis.io:2053/ipfs/QmeRcZfbJJD4To5hxsTiDyuUDYVTppg4RYnnMozSaJDMR3\";\n\n  // const [formData, setFormData] = useState({\n  //   desp: \"\",\n  //   imageFile: undefined,\n  // });\n  \n  // const [addPictureData, setAddPictureData] = useState({\n  //   imageFile: undefined,\n  // });\n\n  // const [navStatus, setNavStatus] = useState({\n  //   home: true,\n  //   myChirpings: false,\n  //   myCagedChirpings: false,\n  //   myProfile: false,\n  //   creatorProfile: false,\n  // });\n\n  // const [random, setRandom] = useState(false);\n  // const [promoteLevelModal, setPromoteLevelModal] = useState(false);\n  // const [chirpingModal, setChirpingModal] = useState(false);\n  // const [addNameData, setAddNameData] = useState({\n  //   name: \"\",\n  // });\n  // const [loading, setLoading] = useState(false);\n  // const [promoteLevelStatus, setpromoteLevelStatus] = useState(false);\n  // const [allChirpings, setAllChirpings] = useState([]);\n  // const [myChirpings, setMyChirpings] = useState([]);\n  // const [myCagedChirpings, setMyCagedChirpings] = useState([]);\n  // const [instructionModal, setInstructionModal] = useState(false);\n  // const [currUser, setCurrUser] = useState();\n  // const [userData, setUserData] = useState({\n  //   username: \"\",\n  //   totalChirpings: 0,\n  //   totalWings: 0,\n  //   totalCages: 0,\n  //   level: 0,\n  // });\n  // const [currCreator, setCurrCreator] = useState();\n\n\n  // // useEffect(() => {\n  // //   const enableWeb3 = async () => {\n  // //     await Moralis.enableWeb3();\n  // //     setRandom(true);\n  // //   };\n  // //   enableWeb3();\n  // // }, []);\n\n  // // useEffect(() => {\n  // //   const getData = async () => {\n  // //     const options = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"showCurrUser\",\n  // //       params: {\n  // //         user: user.get(\"ethAddress\"),\n  // //       },\n  // //     };\n\n  // //     const currentUser = await Moralis.executeFunction(options);\n  // //     console.log(currentUser);\n\n  // //     setCurrUser(currentUser);\n  // //     setUserData({\n  // //       ...userData,\n  // //       username: currentUser.username.toString(),\n  // //       totalChirpings: currentUser.totalChirpings.toNumber(),\n  // //       totalWings: currentUser.totalWings.toNumber(),\n  // //       totalCages: currentUser.totalCages.toNumber(),\n  // //       level: currentUser.level.toNumber(),\n  // //     });\n\n  // //     const options2 = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"getAllChirpings\",\n  // //     };\n\n  // //     const allChirpings = await Moralis.executeFunction(options2);\n  // //     setAllChirpings(allChirpings);\n\n  // //     const options3 = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"getMyChirpings\",\n  // //       params: {\n  // //         user: user.get(\"ethAddress\"),\n  // //       },\n  // //     };\n\n  // //     const myChirpings = await Moralis.executeFunction(options3);\n  // //     setMyChirpings(myChirpings);\n\n  // //     const options4 = {\n  // //       contractAddress: config.contractAddress,\n  // //       abi: contractABI,\n  // //       functionName: \"getCagedChirpings\",\n  // //       params: {\n  // //         user: user.get(\"ethAddress\"),\n  // //       },\n  // //     };\n\n  // //     const myCagedChirpings = await Moralis.executeFunction(options4);\n  // //     setMyCagedChirpings(myCagedChirpings);\n  // //   };\n\n  // //   if (isAuthenticated && random) {\n  // //     getData();\n  // //     console.log(user.get(\"ethAddress\"));\n  // //   }\n  // // }, [user, isAuthenticated, random]);\n\n\n\n\n  // const getCreatorData = async (_creator) => {\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"showCurrUser\",\n  //     params: {\n  //       user: _creator,\n  //     },\n  //   };\n\n  //   const x = await Moralis.executeFunction(options);\n  //   return x;\n  // };\n\n\n\n  // const givingWings = async (chirpingId) => {\n  //   try {\n  //     const options = {\n  //       contractAddress: config.contractAddress,\n  //       abi: contractABI,\n  //       functionName: \"givingWings\",\n  //       params: {\n  //         _chirpingId: chirpingId,\n  //       },\n  //     };\n\n  //     const transaction = await Moralis.executeFunction(options);\n  //     setLoading(true);\n  //     await transaction.wait();\n  //     setLoading(false);\n  //     window.location.reload();\n  //   } catch (err) {\n  //     alert(err.data.message);\n  //   }\n  // };\n\n\n  // const wingsGiven = async (chirpingId) => {\n  //   const readOptions = {\n  //     contractAddress: config.contractAddress,\n  //     functionName: \"wingsGivenCheck\",\n  //     abi: contractABI,\n  //     params: {\n  //       _chirpingId: chirpingId,\n  //       _user: currUser.username,\n  //     },\n  //   };\n\n  //   const result = await Moralis.executeFunction(readOptions);\n  //   return result;\n  // };\n\n\n  // const givingCage = async (uId) => {\n  //   setLoading(true);\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"givingCage\",\n  //     params: {\n  //       _chirpingId: uId,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n  // };\n\n\n  // const cagesGiven = async (chirpingId) => {\n  //   const readOptions = {\n  //     contractAddress: config.contractAddress,\n  //     functionName: \"cagesGivenCheck\",\n  //     abi: contractABI,\n  //     params: {\n  //       _chirpingId: chirpingId,\n  //       _user: currUser.username,\n  //     },\n  //   };\n\n  //   const result = await Moralis.executeFunction(readOptions);\n  //   return result;\n  // };\n\n\n  // const promoteLevel = async (username) => {\n  //   setLoading(true);\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"promoteLevel\",\n  //     params: {\n  //       user: username,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setpromoteLevelStatus(true);\n  //   setLoading(false);\n  //   console.log(\"Level status has been updated\");\n  // };\n\n  // const promoteLevelCheck = () => {\n  //   if (\n  //     currUser.totalChirpings >= 10 &&\n  //     currUser.totalChirpings < 20 &&\n  //     currUser.totalWings >= 20 &&\n  //     currUser.level === 0\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 20 &&\n  //     currUser.totalChirpings < 30 &&\n  //     currUser.totalWings >= 40 &&\n  //     user.level < 2\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 30 &&\n  //     currUser.totalChirpings < 50 &&\n  //     currUser.totalWings >= 60 &&\n  //     currUser.level < 3\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 50 &&\n  //     currUser.totalChirpings < 70 &&\n  //     currUser.totalWings >= 80 &&\n  //     currUser.level < 4\n  //   ) {\n  //     return true;\n  //   } else if (\n  //     currUser.totalChirpings >= 70 &&\n  //     currUser.totalChirpings < 100 &&\n  //     currUser.totalWings >= 100 &&\n  //     currUser.level < 5\n  //   ) {\n  //     return true;\n  //   } else {\n  //     return false;\n  //   }\n  // };\n\n  // const addingName = async () => {\n  //   setLoading(true);\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"addName\",\n  //     params: {\n  //       _name: addNameData.name,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n  // };\n\n  // const addUser = async (username) => {\n  //   try {\n  //     const options = {\n  //       contractAddress: config.contractAddress,\n  //       abi: contractABI,\n  //       functionName: \"addUser\",\n  //       params: {\n  //         user: username,\n  //         displayPicture: displayPicture,\n  //       },\n  //     };\n  //     const transaction = await Moralis.executeFunction(options);\n  //     setLoading(true);\n  //     await transaction.wait();\n  //     setLoading(false);\n  //     window.location.reload();\n  //     console.log(\"User has been added\");\n  //     setInstructionModal(true);\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n\n  // const login = async () => {\n  //   if (!isAuthenticated) {\n  //     setLoading(true);\n  //     await authenticate({ signingMessage: \"Log in using Moralis\" })\n  //       .then(async function (user) {\n  //         console.log(user.get(\"ethAddress\"));\n  //         const username = user.get(\"ethAddress\");\n  //         setLoading(true);\n  //         addUser(username);\n  //       })\n  //       .catch(function (error) {\n  //         console.log(error);\n  //       });\n  //   } else {\n  //     console.log(\"Already logged In\");\n  //   }\n  //   setLoading(false);\n  // };\n\n  // const logOut = async () => {\n  //   await logout();\n  //   window.location.reload();\n  //   console.log(\"logged out\");\n  // };\n\n  // const uploadImage = async () => {\n  //   const data = formData.imageFile[0];\n  //   const file = new Moralis.File(data.name, data);\n  //   await file.saveIPFS();\n  //   return file.ipfs();\n  // };\n\n  // const uploadDisplayPicture = async () => {\n  //   const data = addPictureData.imageFile[0];\n  //   const file = new Moralis.File(data.name, data);\n  //   await file.saveIPFS();\n  //   return file.ipfs();\n  // };\n\n  // const settingImageURL = async () => {\n  //   let imageUrl = \"\";\n  //   if (currUser.level >= 5) {\n  //     if (formData.imageFile === undefined) {\n  //       return imageUrl;\n  //     } else {\n  //       const imageURL = await uploadImage();\n  //       return imageURL;\n  //     }\n  //   } else {\n  //     return imageUrl;\n  //   }\n  // };\n\n  // const settingDisplayPictureURL = async () => {\n  //   if (currUser.level >= 5) {\n  //     const imageURL = await uploadDisplayPicture();\n  //     return imageURL;\n  //   }\n  // };\n\n  // const addChirping = async () => {\n  //   setLoading(true);\n\n  //   const imageUrl = await settingImageURL();\n\n  //   const strLen = formData.desp.length;\n\n  //   const metadata = {\n  //     chirpingText: formData.desp,\n  //     imageURL: imageUrl,\n  //   };\n  //   const file = new Moralis.File(\"file.json\", {\n  //     base64: btoa(JSON.stringify(metadata)),\n  //   });\n\n  //   await file.saveIPFS();\n  //   const dataUrl = file.ipfs();\n  //   console.log(dataUrl);\n\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"addChirping\",\n  //     params: {\n  //       _numOfCharacters: strLen,\n  //       _chirpingText: dataUrl,\n  //       _chirpingImage: dataUrl,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n\n  //   console.log(\"executed\");\n  // };\n\n  // const addPicture = async () => {\n  //   setLoading(true);\n  //   const imageURL = await settingDisplayPictureURL();\n\n  //   const options = {\n  //     contractAddress: config.contractAddress,\n  //     abi: contractABI,\n  //     functionName: \"changeDisplayPicture\",\n  //     params: {\n  //       _imageURL: imageURL,\n  //     },\n  //   };\n\n  //   const transaction = await Moralis.executeFunction(options);\n  //   await transaction.wait();\n  //   setLoading(false);\n  //   window.location.reload();\n  // };\n\n  return (\n    // <div className=\"mainBg\">\n    //   <div\n    //     style={{\n    //       display: \"flex\",\n    //       flexDirection: \"column\",\n    //       alignItems: \"center\",\n    //       padding: \"2rem 2rem 0rem 2rem\",\n    //     }}\n    //   >\n    //     <ReactModal\n    //       className=\"loading\"\n    //       style={{\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //           backdropFilter: \"blur(5px)\",\n    //         },\n    //       }}\n    //       isOpen={loading}\n    //     >\n    //       <img\n    //         alt=\"Logo Animation\"\n    //         src={ChirpingLogo}\n    //         style={{\n    //           width: \"12rem\",\n    //           position: \"absolute\",\n    //           top: \"35%\",\n    //           right: \"45%\",\n    //         }}\n    //       ></img>\n    //     </ReactModal>\n\n    //     <ReactModal\n    //       className=\"addPictureModal\"\n    //       style={{\n    //         width: \"20rem\",\n    //         height: \"15rem\",\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //         },\n    //       }}\n    //       isOpen={promoteLevelModal}\n    //       onRequestClose={() => {\n    //         setPromoteLevelModal(false);\n    //       }}\n    //     >\n    //       <div\n    //         style={{ position: \"absolute\", right: \"1rem\", top: \"1rem\" }}\n    //         onClick={() => {\n    //           setPromoteLevelModal(false);\n    //         }}\n    //       >\n    //         <img\n    //           alt=\"Close\"\n    //           src={Close}\n    //           style={{ width: \"1.5rem\", marginRight: \"1rem\" }}\n    //         ></img>\n    //       </div>\n    //       <div\n    //         style={{\n    //           display: \"flex\",\n    //           flexDirection: \"column\",\n    //           justifyContent: \"center\",\n    //           alignItems: \"center\",\n    //           height: \"100%\",\n    //         }}\n    //       >\n    //         {promoteLevelStatus ? (\n    //           <span className=\"text\" style={{ fontSize: \"32px\" }}>\n    //             You've Been Promoted\n    //           </span>\n    //         ) : (\n    //           <span className=\"text\" style={{ fontSize: \"32px\" }}>\n    //             Processing, please wait!\n    //           </span>\n    //         )}\n    //       </div>\n    //     </ReactModal>\n    //     <ReactModal\n    //       className=\"chirpingModal\"\n    //       style={{\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //         },\n    //       }}\n    //       isOpen={chirpingModal}\n    //       onRequestClose={() => {\n    //         setChirpingModal(false);\n    //       }}\n    //     >\n    //       <div\n    //         style={{ position: \"absolute\", right: \"1rem\", top: \"1rem\" }}\n    //         onClick={() => {\n    //           setChirpingModal(false);\n    //         }}\n    //       >\n    //         <img\n    //           alt=\"Close\"\n    //           src={Close}\n    //           style={{ width: \"2rem\", marginRight: \"1rem\" }}\n    //         ></img>\n    //       </div>\n    //       <form\n    //         style={{\n    //           display: \"flex\",\n    //           flexDirection: \"column\",\n    //           justifyContent: \"center\",\n    //           alignItems: \"center\",\n    //         }}\n    //         onSubmit={() => {\n    //           setChirpingModal(false);\n    //           addChirping();\n    //         }}\n    //       >\n    //         <textarea\n    //           className=\"textfield\"\n    //           style={{ width: \"30rem\", height: \"8rem\", marginTop: \"2rem\" }}\n    //           type=\"text\"\n    //           value={formData.desp}\n    //           placeholder=\"Chirp here!!\"\n    //           onChange={(e) => {\n    //             setFormData({ ...formData, desp: e.target.value });\n    //           }}\n    //         ></textarea>\n    //         <div\n    //           style={{\n    //             display: \"flex\",\n    //             flexDirection: \"row\",\n    //             justifyContent: \"start\",\n    //             alignItems: \"start\",\n    //             width: \"35rem\",\n    //           }}\n    //         >\n    //           {currUser ? (\n    //             currUser.level >= 5 ? (\n    //               <input\n    //                 className=\"textField\"\n    //                 type=\"file\"\n    //                 style={{ marginTop: \"2rem\", marginLeft: \"4rem\" }}\n    //                 onChange={(e) => {\n    //                   e.preventDefault();\n    //                   setFormData({ ...formData, imageFile: e.target.files });\n    //                 }}\n    //               ></input>\n    //             ) : (\n    //               <div></div>\n    //             )\n    //           ) : (\n    //             <div></div>\n    //           )}\n    //         </div>\n\n    //         <input\n    //           className=\"textfield\"\n    //           type=\"submit\"\n    //           style={{\n    //             width: \"10rem\",\n    //             height: \"3rem\",\n    //             fontSize: \"20px\",\n    //             marginTop: \"2rem\",\n    //           }}\n    //         ></input>\n    //       </form>\n    //     </ReactModal>\n\n    //     <ReactModal\n    //       className=\"chirpingModal\"\n    //       style={{\n    //         overlay: {\n    //           backgroundColor: \"rgb(228, 179, 229, 0.45)\",\n    //         },\n    //       }}\n    //       isOpen={instructionModal}\n    //       onRequestClose={() => {\n    //         setInstructionModal(false);\n    //       }}\n    //     >\n    //       <div\n    //         style={{ position: \"absolute\", right: \"1rem\", top: \"1rem\" }}\n    //         onClick={() => {\n    //           setInstructionModal(false);\n    //         }}\n    //       >\n    //         <img\n    //           alt=\"Close\"\n    //           src={Close}\n    //           style={{ width: \"2rem\", marginRight: \"1rem\" }}\n    //         ></img>\n    //       </div>\n    //       <div className=\"text\" style={{ fontSize: \"30px\" }}>\n    //         Instructions\n    //       </div>\n    //     </ReactModal>\n\n\n    //     {!user ?\n    //      (\n    //       <button className=\"connectWallet\" onClick={login}>\n    //         <span style={{ fontSize: \"22px\" }}>Connect Wallet</span>\n    //       </button>\n    //     ) : \n    //     (\n    //       <div>\n    //         <button className=\"connectWallet2\" onClick={logOut}>\n    //           <span style={{ fontSize: \"14px\" }}>Logout</span>\n    //         </button>\n    //         <div\n    //           className=\"displayPicture\"\n    //           style={{\n    //             display: \"flex\",\n    //             flexDirection: \"row\",\n    //             justifyContent: \"center\",\n    //             alignItems: \"center\",\n    //             overflow: \"hidden\",\n    //           }}\n    //         >\n    //           <img\n    //             alt=\"Profile\"\n    //             src={currUser ? currUser.displayPicture : displayPicture}\n    //             style={{\n    //               width: \"8rem\",\n    //               height: \"8rem\",\n    //             }}\n    //           ></img>\n    //         </div>\n    //       </div>\n    //     )}\n\n\n    //     <div\n    //       style={{\n    //         height: \"15vh\",\n    //         width: \"60%\",\n    //         display: \"flex\",\n    //         flexDirection: \"row\",\n    //         justifyContent: \"start\",\n    //         alignItems: \"center\",\n    //       }}\n    //     >\n    //       <Link to=\"/\">\n    //         <img\n    //           alt=\"Chirping logo\"\n    //           src={ChirpingLogo}\n    //           className=\"chirpingLogo\"\n    //         ></img>\n    //       </Link>\n\n    //       <img\n    //         alt=\"Chirping text\"\n    //         src={ChirpingText}\n    //         style={{\n    //           width: \"35rem\",\n    //           position: \"absolute\",\n    //           top: \"-3%\",\n    //           left: \"30%\",\n    //           right: \"25%\",\n    //         }}\n    //       ></img>\n    //     </div>\n    //     <div\n    //       style={{\n    //         height: \"75vh\",\n    //         width: \"100%\",\n    //         marginTop: \"2rem\",\n    //         display: \"flex\",\n    //         flexDirection: \"row\",\n    //         justifyContent: \"space-between\",\n    //         alignItems: \"center\",\n    //       }}\n    //     >\n    //       <div className=\"leftSideBar\">\n    //         {/* <button\n    //           onClick={() => {\n    //             // console.log(userData);\n    //             // console.log(allChirpings);\n    //             // console.log(myChirpings);\n    //             // console.log(myCagedChirpings);\n    //             // console.log(promoteLevelStatus);\n    //             console.log(currUser);\n    //           }}\n    //         >\n    //           CLick here\n    //         </button> */}\n    //         <LeftSideBar\n    //           currUser={currUser}\n    //           setChirpingModal={setChirpingModal}\n    //           setNavStatus={setNavStatus}\n    //           navStatus={navStatus}\n    //         />\n    //       </div>\n    //       <div className=\"middleBar\">\n    //         {user ? (\n    //           <div>\n    //             {navStatus.home ? (\n    //               <div\n    //                 style={{\n    //                   display: \"flex\",\n    //                   flexDirection: \"column\",\n    //                   alignItems: \"center\",\n    //                 }}\n    //               >\n    //                 {allChirpings\n    //                   .map((chirping) => (\n    //                     <AllChirpings\n    //                       key={chirping.chirpingId}\n    //                       chirping={chirping}\n    //                       givingCage={() => {\n    //                         givingCage(chirping.chirpingId);\n    //                       }}\n    //                       givingWings={async () => {\n    //                         await givingWings(chirping.chirpingId);\n    //                       }}\n    //                       wingsGivenCheck={async () => {\n    //                         const x = await wingsGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       cagesGivenCheck={async () => {\n    //                         const x = await cagesGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       getCreatorData={async () => {\n    //                         const x = await getCreatorData(chirping.creator);\n    //                         return x;\n    //                       }}\n    //                       setNavStatus={setNavStatus}\n    //                       setCurrCreator={setCurrCreator}\n    //                     />\n    //                   ))\n    //                   .reverse()}\n    //               </div>\n    //             ) : navStatus.myChirpings ? (\n    //               <div\n    //                 style={{\n    //                   display: \"flex\",\n    //                   flexDirection: \"column\",\n    //                   alignItems: \"center\",\n    //                 }}\n    //               >\n    //                 {myChirpings\n    //                   .map((chirping) => (\n    //                     <AllChirpings\n    //                       key={chirping.chirpingId}\n    //                       chirping={chirping}\n    //                       givingCage={() => {\n    //                         givingCage(chirping.chirpingId);\n    //                       }}\n    //                       givingWings={() => {\n    //                         givingWings(chirping.chirpingId);\n    //                       }}\n    //                       wingsGivenCheck={async () => {\n    //                         const x = await wingsGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       cagesGivenCheck={async () => {\n    //                         const x = await cagesGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       getCreatorData={async () => {\n    //                         const x = await getCreatorData(chirping.creator);\n    //                         return x;\n    //                       }}\n    //                       setNavStatus={setNavStatus}\n    //                       setCurrCreator={setCurrCreator}\n    //                     />\n    //                   ))\n    //                   .reverse()}\n    //               </div>\n    //             ) : navStatus.myCagedChirpings ? (\n    //               <div\n    //                 style={{\n    //                   display: \"flex\",\n    //                   flexDirection: \"column\",\n    //                   alignItems: \"center\",\n    //                 }}\n    //               >\n    //                 {myCagedChirpings\n    //                   .map((chirping) => (\n    //                     <AllChirpings\n    //                       key={chirping.chirpingId}\n    //                       chirping={chirping}\n    //                       givingCage={() => {\n    //                         givingCage(chirping.chirpingId);\n    //                       }}\n    //                       givingWings={() => {\n    //                         givingWings(chirping.chirpingId);\n    //                       }}\n    //                       wingsGivenCheck={async () => {\n    //                         const x = await wingsGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       cagesGivenCheck={async () => {\n    //                         const x = await cagesGiven(chirping.chirpingId);\n    //                         return x;\n    //                       }}\n    //                       getCreatorData={async () => {\n    //                         const x = await getCreatorData(chirping.creator);\n    //                         return x;\n    //                       }}\n    //                       setCurrCreator={setCurrCreator}\n    //                     />\n    //                   ))\n    //                   .reverse()}\n    //               </div>\n    //             ) : navStatus.myProfile ? (\n    //               <MyProfile\n    //                 currUser={currUser}\n    //                 addPicture={addPicture}\n    //                 setAddPictureData={setAddPictureData}\n    //                 addPictureData={addPictureData}\n    //                 addNameData={addNameData}\n    //                 setAddNameData={setAddNameData}\n    //                 addingName={addingName}\n    //               />\n    //             ) : navStatus.creatorProfile ? (\n    //               <CreatorProfile\n    //                 currCreator={async () => {\n    //                   const x = await getCreatorData(currCreator);\n    //                   return x;\n    //                 }}\n    //               />\n    //             ) : (\n    //               <div>Something Else</div>\n    //             )}\n    //           </div>\n    //         ) : \n    //         (\n    //           <div\n    //             className=\"text\"\n    //             style={{\n    //               display: \"flex\",\n    //               flexDirection: \"column\",\n    //               justifyContent: \"center\",\n    //               alignItems: \"center\",\n    //               height: \"40vh\",\n    //               fontSize: \"50px\",\n    //             }}\n    //           >\n    //             Please Connect Your Wallet\n    //           </div>\n    //         )}\n    //       </div>\n\n\n    //       <div style={{ height: \"100%\", width: \"25%\" }}>\n    //         <RightSideBar\n    //           currUser={currUser}\n    //           setPromoteLevelModal={setPromoteLevelModal}\n    //           promoteLevel={promoteLevel}\n    //           promoteLevelCheck={() => {\n    //             const x = promoteLevelCheck();\n    //             return x;\n    //           }}\n    //         />\n    //       </div>\n    //     </div>\n    //   </div>\n    // </div>\n    <div>\n      Welcome to home page\n    </div>\n  );\n};\n\nexport default Homepage;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AACA;AACA,SAASC,cAAc,QAAQ,uBAAuB;AACtD,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,YAAY,MAAM,kCAAkC;AAC3D,OAAOC,KAAK,MAAM,4BAA4B;AAC9C,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,aAAa,MAAM,oCAAoC;AAC9D,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrd,eAAeA,QAAQ;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}