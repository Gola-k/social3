{"ast":null,"code":"'use client';\n\nimport { estimateGasQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\nimport { useConnectorClient } from './useConnectorClient.js';\nexport function useEstimateGas() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    connector,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const {\n    data: connectorClient\n  } = useConnectorClient({\n    connector,\n    query: {\n      enabled: parameters.account === undefined\n    }\n  });\n  const account = parameters.account ?? connectorClient?.account;\n  const chainId = useChainId({\n    config\n  });\n  const options = estimateGasQueryOptions(config, {\n    ...parameters,\n    account,\n    chainId: parameters.chainId ?? chainId,\n    connector\n  });\n  const enabled = Boolean((account || connector) && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["estimateGasQueryOptions","useQuery","useChainId","useConfig","useConnectorClient","useEstimateGas","parameters","arguments","length","undefined","connector","query","config","data","connectorClient","enabled","account","chainId","options","Boolean"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useEstimateGas.ts"],"sourcesContent":["'use client'\n\nimport type {\n  Config,\n  EstimateGasErrorType,\n  ResolvedRegister,\n} from '@wagmi/core'\nimport {\n  type EstimateGasData,\n  type EstimateGasOptions,\n  type EstimateGasQueryFnData,\n  type EstimateGasQueryKey,\n  estimateGasQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\nimport { useConnectorClient } from './useConnectorClient.js'\n\nexport type UseEstimateGasParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = EstimateGasData,\n> = EstimateGasOptions<config, chainId> &\n  ConfigParameter<config> &\n  QueryParameter<\n    EstimateGasQueryFnData,\n    EstimateGasErrorType,\n    selectData,\n    EstimateGasQueryKey<config, chainId>\n  >\n\nexport type UseEstimateGasReturnType<selectData = EstimateGasData> =\n  UseQueryReturnType<selectData, EstimateGasErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEstimateGas */\nexport function useEstimateGas<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\n  selectData = EstimateGasData,\n>(\n  parameters?: UseEstimateGasParameters<config, chainId, selectData>,\n): UseEstimateGasReturnType<selectData>\n\nexport function useEstimateGas(\n  parameters: UseEstimateGasParameters = {},\n): UseEstimateGasReturnType {\n  const { connector, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const { data: connectorClient } = useConnectorClient({\n    connector,\n    query: { enabled: parameters.account === undefined },\n  })\n  const account = parameters.account ?? connectorClient?.account\n  const chainId = useChainId({ config })\n\n  const options = estimateGasQueryOptions(config, {\n    ...parameters,\n    account,\n    chainId: parameters.chainId ?? chainId,\n    connector,\n  })\n  const enabled = Boolean((account || connector) && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAOZ,SAKEA,uBAAuB,QAClB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,kBAAkB,QAAQ,yBAAyB;AA2B5D,OAAM,SAAUC,cAAcA,CAAA,EACa;EAAA,IAAzCC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;EAEzC,MAAM;IAAEG,SAAS;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGL,UAAU;EAE5C,MAAMM,MAAM,GAAGT,SAAS,CAACG,UAAU,CAAC;EACpC,MAAM;IAAEO,IAAI,EAAEC;EAAe,CAAE,GAAGV,kBAAkB,CAAC;IACnDM,SAAS;IACTC,KAAK,EAAE;MAAEI,OAAO,EAAET,UAAU,CAACU,OAAO,KAAKP;IAAS;GACnD,CAAC;EACF,MAAMO,OAAO,GAAGV,UAAU,CAACU,OAAO,IAAIF,eAAe,EAAEE,OAAO;EAC9D,MAAMC,OAAO,GAAGf,UAAU,CAAC;IAAEU;EAAM,CAAE,CAAC;EAEtC,MAAMM,OAAO,GAAGlB,uBAAuB,CAACY,MAAM,EAAE;IAC9C,GAAGN,UAAU;IACbU,OAAO;IACPC,OAAO,EAAEX,UAAU,CAACW,OAAO,IAAIA,OAAO;IACtCP;GACD,CAAC;EACF,MAAMK,OAAO,GAAGI,OAAO,CAAC,CAACH,OAAO,IAAIN,SAAS,MAAMC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAAC;EAE1E,OAAOd,QAAQ,CAAC;IAAE,GAAGU,KAAK;IAAE,GAAGO,OAAO;IAAEH;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}