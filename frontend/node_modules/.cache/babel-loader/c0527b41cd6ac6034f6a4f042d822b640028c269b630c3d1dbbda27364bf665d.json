{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PollingBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(require(\"json-rpc-random-id\"));\nconst pify_1 = __importDefault(require(\"pify\"));\nconst BaseBlockTracker_1 = require(\"./BaseBlockTracker\");\nconst logging_utils_1 = require(\"./logging-utils\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'polling-block-tracker');\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nconst sec = 1000;\nclass PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n    super(Object.assign(Object.assign({}, opts), {\n      blockResetDuration: (_a = opts.blockResetDuration) !== null && _a !== void 0 ? _a : opts.pollingInterval\n    }));\n    // config\n    this._provider = opts.provider;\n    this._pollingInterval = opts.pollingInterval || 20 * sec;\n    this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n    this._keepEventLoopActive = opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n    this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n  }\n  // trigger block polling\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    return await this.getLatestBlock();\n  }\n  async _start() {\n    this._synchronize();\n  }\n  async _end() {\n    // No-op\n  }\n  async _synchronize() {\n    var _a;\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        const promise = timeout(this._pollingInterval, !this._keepEventLoopActive);\n        this.emit('_waitingForNextIteration');\n        await promise;\n      } catch (err) {\n        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${(_a = err.stack) !== null && _a !== void 0 ? _a : err}`);\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n        const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);\n        this.emit('_waitingForNextIteration');\n        await promise;\n      }\n    }\n  }\n  async _updateLatestBlock() {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n    this._newPotentialLatest(latestBlock);\n  }\n  async _fetchLatestBlock() {\n    const req = {\n      jsonrpc: '2.0',\n      id: createRandomId(),\n      method: 'eth_blockNumber',\n      params: []\n    };\n    if (this._setSkipCacheFlag) {\n      req.skipCache = true;\n    }\n    log('Making request', req);\n    const res = await (0, pify_1.default)(cb => this._provider.sendAsync(req, cb))();\n    log('Got response', res);\n    if (res.error) {\n      throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error.message}`);\n    }\n    return res.result;\n  }\n}\nexports.PollingBlockTracker = PollingBlockTracker;\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */\nfunction timeout(duration, unref) {\n  return new Promise(resolve => {\n    const timeoutRef = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timeoutRef.unref && unref) {\n      timeoutRef.unref();\n    }\n  });\n}","map":{"version":3,"names":["json_rpc_random_id_1","__importDefault","require","pify_1","BaseBlockTracker_1","logging_utils_1","log","createModuleLogger","projectLogger","createRandomId","default","sec","PollingBlockTracker","BaseBlockTracker","constructor","opts","arguments","length","undefined","provider","Error","Object","assign","blockResetDuration","_a","pollingInterval","_provider","_pollingInterval","_retryTimeout","retryTimeout","_keepEventLoopActive","keepEventLoopActive","_setSkipCacheFlag","setSkipCacheFlag","checkForLatestBlock","_updateLatestBlock","getLatestBlock","_start","_synchronize","_end","_isRunning","promise","timeout","emit","err","newErr","stack","emitErr","console","error","latestBlock","_fetchLatestBlock","_newPotentialLatest","req","jsonrpc","id","method","params","skipCache","res","cb","sendAsync","message","result","exports","duration","unref","Promise","resolve","timeoutRef","setTimeout"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/eth-block-tracker/src/PollingBlockTracker.ts"],"sourcesContent":["import getCreateRandomId from 'json-rpc-random-id';\nimport pify from 'pify';\nimport { JsonRpcRequest } from 'json-rpc-engine';\nimport type { SafeEventEmitterProvider } from '@metamask/eth-json-rpc-provider';\nimport { BaseBlockTracker } from './BaseBlockTracker';\nimport { projectLogger, createModuleLogger } from './logging-utils';\n\nconst log = createModuleLogger(projectLogger, 'polling-block-tracker');\nconst createRandomId = getCreateRandomId();\nconst sec = 1000;\n\nexport interface PollingBlockTrackerOptions {\n  provider?: SafeEventEmitterProvider;\n  pollingInterval?: number;\n  retryTimeout?: number;\n  keepEventLoopActive?: boolean;\n  setSkipCacheFlag?: boolean;\n  blockResetDuration?: number;\n  usePastBlocks?: boolean;\n}\n\ninterface ExtendedJsonRpcRequest<T> extends JsonRpcRequest<T> {\n  skipCache?: boolean;\n}\n\nexport class PollingBlockTracker extends BaseBlockTracker {\n  private _provider: SafeEventEmitterProvider;\n\n  private _pollingInterval: number;\n\n  private _retryTimeout: number;\n\n  private _keepEventLoopActive: boolean;\n\n  private _setSkipCacheFlag: boolean;\n\n  constructor(opts: PollingBlockTrackerOptions = {}) {\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n\n    super({\n      ...opts,\n      blockResetDuration: opts.blockResetDuration ?? opts.pollingInterval,\n    });\n\n    // config\n    this._provider = opts.provider;\n    this._pollingInterval = opts.pollingInterval || 20 * sec;\n    this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n    this._keepEventLoopActive =\n      opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n    this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n  }\n\n  // trigger block polling\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    return await this.getLatestBlock();\n  }\n\n  protected async _start(): Promise<void> {\n    this._synchronize();\n  }\n\n  protected async _end(): Promise<void> {\n    // No-op\n  }\n\n  private async _synchronize(): Promise<void> {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        const promise = timeout(\n          this._pollingInterval,\n          !this._keepEventLoopActive,\n        );\n        this.emit('_waitingForNextIteration');\n        await promise;\n      } catch (err: any) {\n        const newErr = new Error(\n          `PollingBlockTracker - encountered an error while attempting to update latest block:\\n${\n            err.stack ?? err\n          }`,\n        );\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n        const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);\n        this.emit('_waitingForNextIteration');\n        await promise;\n      }\n    }\n  }\n\n  private async _updateLatestBlock(): Promise<void> {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n    this._newPotentialLatest(latestBlock);\n  }\n\n  private async _fetchLatestBlock(): Promise<string> {\n    const req: ExtendedJsonRpcRequest<[]> = {\n      jsonrpc: '2.0',\n      id: createRandomId(),\n      method: 'eth_blockNumber',\n      params: [],\n    };\n    if (this._setSkipCacheFlag) {\n      req.skipCache = true;\n    }\n\n    log('Making request', req);\n    const res = await pify((cb) => this._provider.sendAsync(req, cb))();\n    log('Got response', res);\n    if (res.error) {\n      throw new Error(\n        `PollingBlockTracker - encountered error fetching block:\\n${res.error.message}`,\n      );\n    }\n    return res.result;\n  }\n}\n\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */\nfunction timeout(duration: number, unref: boolean) {\n  return new Promise((resolve) => {\n    const timeoutRef = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timeoutRef.unref && unref) {\n      timeoutRef.unref();\n    }\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}