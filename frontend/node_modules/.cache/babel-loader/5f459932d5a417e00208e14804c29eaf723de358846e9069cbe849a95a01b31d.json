{"ast":null,"code":"import { ChainNotConfiguredError, createConnector, extractRpcUrls } from '@wagmi/core';\nimport { ResourceUnavailableRpcError, SwitchChainError, UserRejectedRequestError, getAddress, numberToHex, withRetry, withTimeout } from 'viem';\nmetaMask.type = 'metaMask';\nexport function metaMask() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let sdk;\n  let provider;\n  let providerPromise;\n  let accountsChanged;\n  let chainChanged;\n  let connect;\n  let displayUri;\n  let disconnect;\n  return createConnector(config => ({\n    id: 'metaMaskSDK',\n    name: 'MetaMask',\n    type: metaMask.type,\n    async setup() {\n      const provider = await this.getProvider();\n      if (provider && !connect) {\n        connect = this.onConnect.bind(this);\n        provider.on('connect', connect);\n      }\n    },\n    async connect() {\n      let {\n        chainId,\n        isReconnecting\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const provider = await this.getProvider();\n      if (!displayUri) {\n        displayUri = this.onDisplayUri;\n        provider.on('display_uri', displayUri);\n      }\n      let accounts = [];\n      if (isReconnecting) accounts = await this.getAccounts().catch(() => []);\n      try {\n        if (!accounts?.length) {\n          const requestedAccounts = await sdk.connect();\n          accounts = requestedAccounts.map(x => getAddress(x));\n        }\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId();\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain({\n            chainId\n          }).catch(error => {\n            if (error.code === UserRejectedRequestError.code) throw error;\n            return {\n              id: currentChainId\n            };\n          });\n          currentChainId = chain?.id ?? currentChainId;\n        }\n        if (displayUri) {\n          provider.removeListener('display_uri', displayUri);\n          displayUri = undefined;\n        }\n        // Manage EIP-1193 event listeners\n        // https://eips.ethereum.org/EIPS/eip-1193#events\n        if (connect) {\n          provider.removeListener('connect', connect);\n          connect = undefined;\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this);\n          provider.on('accountsChanged', accountsChanged);\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this);\n          provider.on('chainChanged', chainChanged);\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this);\n          provider.on('disconnect', disconnect);\n        }\n        return {\n          accounts,\n          chainId: currentChainId\n        };\n      } catch (err) {\n        const error = err;\n        if (error.code === UserRejectedRequestError.code) throw new UserRejectedRequestError(error);\n        if (error.code === ResourceUnavailableRpcError.code) throw new ResourceUnavailableRpcError(error);\n        throw error;\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider();\n      // Manage EIP-1193 event listeners\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged);\n        accountsChanged = undefined;\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged);\n        chainChanged = undefined;\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect);\n        disconnect = undefined;\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this);\n        provider.on('connect', connect);\n      }\n      await sdk.terminate();\n    },\n    async getAccounts() {\n      const provider = await this.getProvider();\n      const accounts = await provider.request({\n        method: 'eth_accounts'\n      });\n      return accounts.map(x => getAddress(x));\n    },\n    async getChainId() {\n      const provider = await this.getProvider();\n      const chainId = provider.getChainId() || (await provider?.request({\n        method: 'eth_chainId'\n      }));\n      return Number(chainId);\n    },\n    async getProvider() {\n      async function initProvider() {\n        // Unwrapping import for Vite compatibility.\n        // See: https://github.com/vitejs/vite/issues/9703\n        const MetaMaskSDK = await (async () => {\n          const {\n            default: SDK\n          } = await import('@metamask/sdk');\n          if (typeof SDK !== 'function' && typeof SDK.default === 'function') return SDK.default;\n          return SDK;\n        })();\n        sdk = new MetaMaskSDK({\n          _source: 'wagmi',\n          // Workaround cast since MetaMask SDK does not support `'exactOptionalPropertyTypes'`\n          ...parameters,\n          readonlyRPCMap: Object.fromEntries(config.chains.map(chain => {\n            const [url] = extractRpcUrls({\n              chain,\n              transports: config.transports\n            });\n            return [chain.id, url];\n          })),\n          dappMetadata: parameters.dappMetadata ?? {},\n          useDeeplink: parameters.useDeeplink ?? true\n        });\n        await sdk.init();\n        return sdk.getProvider();\n      }\n      if (!provider) {\n        if (!providerPromise) providerPromise = initProvider();\n        provider = await providerPromise;\n      }\n      return provider;\n    },\n    async isAuthorized() {\n      try {\n        // MetaMask mobile provider sometimes fails to immediately resolve\n        // JSON-RPC requests on page load\n        const timeout = 200;\n        const accounts = await withRetry(() => withTimeout(() => this.getAccounts(), {\n          timeout\n        }), {\n          delay: timeout + 1,\n          retryCount: 3\n        });\n        return !!accounts.length;\n      } catch {\n        return false;\n      }\n    },\n    async switchChain(_ref) {\n      let {\n        addEthereumChainParameter,\n        chainId\n      } = _ref;\n      const provider = await this.getProvider();\n      const chain = config.chains.find(x => x.id === chainId);\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError());\n      try {\n        await Promise.all([provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: numberToHex(chainId)\n          }]\n        })\n        // During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\n        // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\n        // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\n        // this callback or an externally emitted `'chainChanged'` event.\n        // https://github.com/MetaMask/metamask-extension/issues/24247\n        .then(async () => {\n          const currentChainId = await this.getChainId();\n          if (currentChainId === chainId) config.emitter.emit('change', {\n            chainId\n          });\n        }), new Promise(resolve => config.emitter.once('change', _ref2 => {\n          let {\n            chainId: currentChainId\n          } = _ref2;\n          if (currentChainId === chainId) resolve();\n        }))]);\n        return chain;\n      } catch (err) {\n        const error = err;\n        // Indicates chain is not added to provider\n        if (error.code === 4902 ||\n        // Unwrapping for MetaMask Mobile\n        // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n        error?.data?.originalError?.code === 4902) {\n          try {\n            const {\n              default: blockExplorer,\n              ...blockExplorers\n            } = chain.blockExplorers ?? {};\n            let blockExplorerUrls;\n            if (addEthereumChainParameter?.blockExplorerUrls) blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;else if (blockExplorer) blockExplorerUrls = [blockExplorer.url, ...Object.values(blockExplorers).map(x => x.url)];\n            let rpcUrls;\n            if (addEthereumChainParameter?.rpcUrls?.length) rpcUrls = addEthereumChainParameter.rpcUrls;else rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,\n              rpcUrls\n            };\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain]\n            });\n            const currentChainId = await this.getChainId();\n            if (currentChainId !== chainId) throw new UserRejectedRequestError(new Error('User rejected switch after adding network.'));\n            return chain;\n          } catch (error) {\n            throw new UserRejectedRequestError(error);\n          }\n        }\n        if (error.code === UserRejectedRequestError.code) throw new UserRejectedRequestError(error);\n        throw new SwitchChainError(error);\n      }\n    },\n    async onAccountsChanged(accounts) {\n      // Disconnect if there are no accounts\n      if (accounts.length === 0) this.onDisconnect();\n      // Connect if emitter is listening for connect event (e.g. is disconnected and connects through wallet interface)\n      else if (config.emitter.listenerCount('connect')) {\n        const chainId = (await this.getChainId()).toString();\n        this.onConnect({\n          chainId\n        });\n      }\n      // Regular change event\n      else config.emitter.emit('change', {\n        accounts: accounts.map(x => getAddress(x))\n      });\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain);\n      config.emitter.emit('change', {\n        chainId\n      });\n    },\n    async onConnect(connectInfo) {\n      const accounts = await this.getAccounts();\n      if (accounts.length === 0) return;\n      const chainId = Number(connectInfo.chainId);\n      config.emitter.emit('connect', {\n        accounts,\n        chainId\n      });\n      const provider = await this.getProvider();\n      if (connect) {\n        provider.removeListener('connect', connect);\n        connect = undefined;\n      }\n      if (!accountsChanged) {\n        accountsChanged = this.onAccountsChanged.bind(this);\n        provider.on('accountsChanged', accountsChanged);\n      }\n      if (!chainChanged) {\n        chainChanged = this.onChainChanged.bind(this);\n        provider.on('chainChanged', chainChanged);\n      }\n      if (!disconnect) {\n        disconnect = this.onDisconnect.bind(this);\n        provider.on('disconnect', disconnect);\n      }\n    },\n    async onDisconnect(error) {\n      const provider = await this.getProvider();\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error && error.code === 1013) {\n        if (provider && !!(await this.getAccounts()).length) return;\n      }\n      // Remove cached SDK properties.\n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem('MMSDK_cached_address');\n        localStorage.removeItem('MMSDK_cached_chainId');\n      }\n      config.emitter.emit('disconnect');\n      // Manage EIP-1193 event listeners\n      if (!accountsChanged) {\n        accountsChanged = this.onAccountsChanged.bind(this);\n        provider.on('accountsChanged', accountsChanged);\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged);\n        chainChanged = undefined;\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect);\n        disconnect = undefined;\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this);\n        provider.on('connect', connect);\n      }\n    },\n    onDisplayUri(uri) {\n      config.emitter.emit('message', {\n        type: 'display_uri',\n        data: uri\n      });\n    }\n  }));\n}","map":{"version":3,"names":["ChainNotConfiguredError","createConnector","extractRpcUrls","ResourceUnavailableRpcError","SwitchChainError","UserRejectedRequestError","getAddress","numberToHex","withRetry","withTimeout","metaMask","type","parameters","arguments","length","undefined","sdk","provider","providerPromise","accountsChanged","chainChanged","connect","displayUri","disconnect","config","id","name","setup","getProvider","onConnect","bind","on","chainId","isReconnecting","onDisplayUri","accounts","getAccounts","catch","requestedAccounts","map","x","currentChainId","getChainId","chain","switchChain","error","code","removeListener","onAccountsChanged","onChainChanged","onDisconnect","err","terminate","request","method","Number","initProvider","MetaMaskSDK","default","SDK","_source","readonlyRPCMap","Object","fromEntries","chains","url","transports","dappMetadata","useDeeplink","init","isAuthorized","timeout","delay","retryCount","_ref","addEthereumChainParameter","find","Promise","all","params","then","emitter","emit","resolve","once","_ref2","data","originalError","blockExplorer","blockExplorers","blockExplorerUrls","values","rpcUrls","http","addEthereumChain","chainName","iconUrls","nativeCurrency","Error","listenerCount","toString","connectInfo","localStorage","removeItem","uri"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/connectors/src/metaMask.ts"],"sourcesContent":["import type {\n  MetaMaskSDK,\n  MetaMaskSDKOptions,\n  SDKProvider,\n} from '@metamask/sdk'\nimport {\n  ChainNotConfiguredError,\n  type Connector,\n  createConnector,\n  extractRpcUrls,\n} from '@wagmi/core'\nimport type {\n  Compute,\n  ExactPartial,\n  RemoveUndefined,\n} from '@wagmi/core/internal'\nimport {\n  type AddEthereumChainParameter,\n  type Address,\n  type ProviderConnectInfo,\n  type ProviderRpcError,\n  ResourceUnavailableRpcError,\n  type RpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  numberToHex,\n  withRetry,\n  withTimeout,\n} from 'viem'\n\nexport type MetaMaskParameters = Compute<\n  ExactPartial<Omit<MetaMaskSDKOptions, '_source' | 'readonlyRPCMap'>>\n>\n\nmetaMask.type = 'metaMask' as const\nexport function metaMask(parameters: MetaMaskParameters = {}) {\n  type Provider = SDKProvider\n  type Properties = {\n    onConnect(connectInfo: ProviderConnectInfo): void\n    onDisplayUri(uri: string): void\n  }\n  type Listener = Parameters<Provider['on']>[1]\n\n  let sdk: MetaMaskSDK\n  let provider: Provider | undefined\n  let providerPromise: Promise<typeof provider>\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let connect: Connector['onConnect'] | undefined\n  let displayUri: ((uri: string) => void) | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties>((config) => ({\n    id: 'metaMaskSDK',\n    name: 'MetaMask',\n    type: metaMask.type,\n    async setup() {\n      const provider = await this.getProvider()\n      if (provider && !connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect as Listener)\n      }\n    },\n    async connect({ chainId, isReconnecting } = {}) {\n      const provider = await this.getProvider()\n      if (!displayUri) {\n        displayUri = this.onDisplayUri\n        provider.on('display_uri', displayUri as Listener)\n      }\n\n      let accounts: readonly Address[] = []\n      if (isReconnecting) accounts = await this.getAccounts().catch(() => [])\n\n      try {\n        if (!accounts?.length) {\n          const requestedAccounts = (await sdk.connect()) as string[]\n          accounts = requestedAccounts.map((x) => getAddress(x))\n        }\n\n        // Switch to chain if provided\n        let currentChainId = (await this.getChainId()) as number\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        if (displayUri) {\n          provider.removeListener('display_uri', displayUri)\n          displayUri = undefined\n        }\n\n        // Manage EIP-1193 event listeners\n        // https://eips.ethereum.org/EIPS/eip-1193#events\n        if (connect) {\n          provider.removeListener('connect', connect)\n          connect = undefined\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged as Listener)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged as Listener)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect as Listener)\n        }\n\n        return { accounts, chainId: currentChainId }\n      } catch (err) {\n        const error = err as RpcError\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        if (error.code === ResourceUnavailableRpcError.code)\n          throw new ResourceUnavailableRpcError(error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n\n      // Manage EIP-1193 event listeners\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect as Listener)\n      }\n\n      await sdk.terminate()\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      const accounts = (await provider.request({\n        method: 'eth_accounts',\n      })) as string[]\n      return accounts.map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      const chainId =\n        provider.getChainId() ||\n        (await provider?.request({ method: 'eth_chainId' }))\n      return Number(chainId)\n    },\n    async getProvider() {\n      async function initProvider() {\n        // Unwrapping import for Vite compatibility.\n        // See: https://github.com/vitejs/vite/issues/9703\n        const MetaMaskSDK = await (async () => {\n          const { default: SDK } = await import('@metamask/sdk')\n          if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n            return SDK.default\n          return SDK as unknown as typeof SDK.default\n        })()\n\n        sdk = new MetaMaskSDK({\n          _source: 'wagmi',\n          // Workaround cast since MetaMask SDK does not support `'exactOptionalPropertyTypes'`\n          ...(parameters as RemoveUndefined<typeof parameters>),\n          readonlyRPCMap: Object.fromEntries(\n            config.chains.map((chain) => {\n              const [url] = extractRpcUrls({\n                chain,\n                transports: config.transports,\n              })\n              return [chain.id, url]\n            }),\n          ),\n          dappMetadata: parameters.dappMetadata ?? {},\n          useDeeplink: parameters.useDeeplink ?? true,\n        })\n        await sdk.init()\n        return sdk.getProvider()!\n      }\n\n      if (!provider) {\n        if (!providerPromise) providerPromise = initProvider()\n        provider = await providerPromise\n      }\n      return provider!\n    },\n    async isAuthorized() {\n      try {\n        // MetaMask mobile provider sometimes fails to immediately resolve\n        // JSON-RPC requests on page load\n        const timeout = 200\n        const accounts = await withRetry(\n          () => withTimeout(() => this.getAccounts(), { timeout }),\n          {\n            delay: timeout + 1,\n            retryCount: 3,\n          },\n        )\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const provider = await this.getProvider()\n\n      const chain = config.chains.find((x) => x.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      try {\n        await Promise.all([\n          provider\n            .request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: numberToHex(chainId) }],\n            })\n            // During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\n            // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\n            // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\n            // this callback or an externally emitted `'chainChanged'` event.\n            // https://github.com/MetaMask/metamask-extension/issues/24247\n            .then(async () => {\n              const currentChainId = await this.getChainId()\n              if (currentChainId === chainId)\n                config.emitter.emit('change', { chainId })\n            }),\n          new Promise<void>((resolve) =>\n            config.emitter.once('change', ({ chainId: currentChainId }) => {\n              if (currentChainId === chainId) resolve()\n            }),\n          ),\n        ])\n        return chain\n      } catch (err) {\n        const error = err as RpcError\n\n        // Indicates chain is not added to provider\n        if (\n          error.code === 4902 ||\n          // Unwrapping for MetaMask Mobile\n          // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n          (error as ProviderRpcError<{ originalError?: { code: number } }>)\n            ?.data?.originalError?.code === 4902\n        ) {\n          try {\n            const { default: blockExplorer, ...blockExplorers } =\n              chain.blockExplorers ?? {}\n            let blockExplorerUrls: string[] | undefined\n            if (addEthereumChainParameter?.blockExplorerUrls)\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n            else if (blockExplorer)\n              blockExplorerUrls = [\n                blockExplorer.url,\n                ...Object.values(blockExplorers).map((x) => x.url),\n              ]\n\n            let rpcUrls: readonly string[]\n            if (addEthereumChainParameter?.rpcUrls?.length)\n              rpcUrls = addEthereumChainParameter.rpcUrls\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\n\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency:\n                addEthereumChainParameter?.nativeCurrency ??\n                chain.nativeCurrency,\n              rpcUrls,\n            } satisfies AddEthereumChainParameter\n\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain],\n            })\n\n            const currentChainId = await this.getChainId()\n            if (currentChainId !== chainId)\n              throw new UserRejectedRequestError(\n                new Error('User rejected switch after adding network.'),\n              )\n\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        throw new SwitchChainError(error)\n      }\n    },\n    async onAccountsChanged(accounts) {\n      // Disconnect if there are no accounts\n      if (accounts.length === 0) this.onDisconnect()\n      // Connect if emitter is listening for connect event (e.g. is disconnected and connects through wallet interface)\n      else if (config.emitter.listenerCount('connect')) {\n        const chainId = (await this.getChainId()).toString()\n        this.onConnect({ chainId })\n      }\n      // Regular change event\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onConnect(connectInfo) {\n      const accounts = await this.getAccounts()\n      if (accounts.length === 0) return\n\n      const chainId = Number(connectInfo.chainId)\n      config.emitter.emit('connect', { accounts, chainId })\n\n      const provider = await this.getProvider()\n      if (connect) {\n        provider.removeListener('connect', connect)\n        connect = undefined\n      }\n      if (!accountsChanged) {\n        accountsChanged = this.onAccountsChanged.bind(this)\n        provider.on('accountsChanged', accountsChanged as Listener)\n      }\n      if (!chainChanged) {\n        chainChanged = this.onChainChanged.bind(this)\n        provider.on('chainChanged', chainChanged as Listener)\n      }\n      if (!disconnect) {\n        disconnect = this.onDisconnect.bind(this)\n        provider.on('disconnect', disconnect as Listener)\n      }\n    },\n    async onDisconnect(error) {\n      const provider = await this.getProvider()\n\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error && (error as RpcError<1013>).code === 1013) {\n        if (provider && !!(await this.getAccounts()).length) return\n      }\n\n      // Remove cached SDK properties.\n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem('MMSDK_cached_address')\n        localStorage.removeItem('MMSDK_cached_chainId')\n      }\n\n      config.emitter.emit('disconnect')\n\n      // Manage EIP-1193 event listeners\n      if (!accountsChanged) {\n        accountsChanged = this.onAccountsChanged.bind(this)\n        provider.on('accountsChanged', accountsChanged as Listener)\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect as Listener)\n      }\n    },\n    onDisplayUri(uri) {\n      config.emitter.emit('message', { type: 'display_uri', data: uri })\n    },\n  }))\n}\n"],"mappings":"AAKA,SACEA,uBAAuB,EAEvBC,eAAe,EACfC,cAAc,QACT,aAAa;AAMpB,SAKEC,2BAA2B,EAE3BC,gBAAgB,EAChBC,wBAAwB,EACxBC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,WAAW,QACN,MAAM;AAMbC,QAAQ,CAACC,IAAI,GAAG,UAAmB;AACnC,OAAM,SAAUD,QAAQA,CAAA,EAAoC;EAAA,IAAnCE,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiC,EAAE;EAQ1D,IAAIG,GAAgB;EACpB,IAAIC,QAA8B;EAClC,IAAIC,eAAyC;EAE7C,IAAIC,eAA2D;EAC/D,IAAIC,YAAqD;EACzD,IAAIC,OAA2C;EAC/C,IAAIC,UAA+C;EACnD,IAAIC,UAAiD;EAErD,OAAOtB,eAAe,CAAwBuB,MAAM,KAAM;IACxDC,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,UAAU;IAChBf,IAAI,EAAED,QAAQ,CAACC,IAAI;IACnB,MAAMgB,KAAKA,CAAA;MACT,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MACzC,IAAIX,QAAQ,IAAI,CAACI,OAAO,EAAE;QACxBA,OAAO,GAAG,IAAI,CAACQ,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;QACnCb,QAAQ,CAACc,EAAE,CAAC,SAAS,EAAEV,OAAmB,CAAC;MAC7C;IACF,CAAC;IACD,MAAMA,OAAOA,CAAA,EAAiC;MAAA,IAAhC;QAAEW,OAAO;QAAEC;MAAc,CAAE,GAAApB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;MAC5C,MAAMI,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MACzC,IAAI,CAACN,UAAU,EAAE;QACfA,UAAU,GAAG,IAAI,CAACY,YAAY;QAC9BjB,QAAQ,CAACc,EAAE,CAAC,aAAa,EAAET,UAAsB,CAAC;MACpD;MAEA,IAAIa,QAAQ,GAAuB,EAAE;MACrC,IAAIF,cAAc,EAAEE,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,MAAM,EAAE,CAAC;MAEvE,IAAI;QACF,IAAI,CAACF,QAAQ,EAAErB,MAAM,EAAE;UACrB,MAAMwB,iBAAiB,GAAI,MAAMtB,GAAG,CAACK,OAAO,EAAe;UAC3Dc,QAAQ,GAAGG,iBAAiB,CAACC,GAAG,CAAEC,CAAC,IAAKlC,UAAU,CAACkC,CAAC,CAAC,CAAC;QACxD;QAEA;QACA,IAAIC,cAAc,GAAI,MAAM,IAAI,CAACC,UAAU,EAAa;QACxD,IAAIV,OAAO,IAAIS,cAAc,KAAKT,OAAO,EAAE;UACzC,MAAMW,KAAK,GAAG,MAAM,IAAI,CAACC,WAAY,CAAC;YAAEZ;UAAO,CAAE,CAAC,CAACK,KAAK,CAAEQ,KAAK,IAAI;YACjE,IAAIA,KAAK,CAACC,IAAI,KAAKzC,wBAAwB,CAACyC,IAAI,EAAE,MAAMD,KAAK;YAC7D,OAAO;cAAEpB,EAAE,EAAEgB;YAAc,CAAE;UAC/B,CAAC,CAAC;UACFA,cAAc,GAAGE,KAAK,EAAElB,EAAE,IAAIgB,cAAc;QAC9C;QAEA,IAAInB,UAAU,EAAE;UACdL,QAAQ,CAAC8B,cAAc,CAAC,aAAa,EAAEzB,UAAU,CAAC;UAClDA,UAAU,GAAGP,SAAS;QACxB;QAEA;QACA;QACA,IAAIM,OAAO,EAAE;UACXJ,QAAQ,CAAC8B,cAAc,CAAC,SAAS,EAAE1B,OAAO,CAAC;UAC3CA,OAAO,GAAGN,SAAS;QACrB;QACA,IAAI,CAACI,eAAe,EAAE;UACpBA,eAAe,GAAG,IAAI,CAAC6B,iBAAiB,CAAClB,IAAI,CAAC,IAAI,CAAC;UACnDb,QAAQ,CAACc,EAAE,CAAC,iBAAiB,EAAEZ,eAA2B,CAAC;QAC7D;QACA,IAAI,CAACC,YAAY,EAAE;UACjBA,YAAY,GAAG,IAAI,CAAC6B,cAAc,CAACnB,IAAI,CAAC,IAAI,CAAC;UAC7Cb,QAAQ,CAACc,EAAE,CAAC,cAAc,EAAEX,YAAwB,CAAC;QACvD;QACA,IAAI,CAACG,UAAU,EAAE;UACfA,UAAU,GAAG,IAAI,CAAC2B,YAAY,CAACpB,IAAI,CAAC,IAAI,CAAC;UACzCb,QAAQ,CAACc,EAAE,CAAC,YAAY,EAAER,UAAsB,CAAC;QACnD;QAEA,OAAO;UAAEY,QAAQ;UAAEH,OAAO,EAAES;QAAc,CAAE;MAC9C,CAAC,CAAC,OAAOU,GAAG,EAAE;QACZ,MAAMN,KAAK,GAAGM,GAAe;QAC7B,IAAIN,KAAK,CAACC,IAAI,KAAKzC,wBAAwB,CAACyC,IAAI,EAC9C,MAAM,IAAIzC,wBAAwB,CAACwC,KAAK,CAAC;QAC3C,IAAIA,KAAK,CAACC,IAAI,KAAK3C,2BAA2B,CAAC2C,IAAI,EACjD,MAAM,IAAI3C,2BAA2B,CAAC0C,KAAK,CAAC;QAC9C,MAAMA,KAAK;MACb;IACF,CAAC;IACD,MAAMtB,UAAUA,CAAA;MACd,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MAEzC;MACA,IAAIT,eAAe,EAAE;QACnBF,QAAQ,CAAC8B,cAAc,CAAC,iBAAiB,EAAE5B,eAAe,CAAC;QAC3DA,eAAe,GAAGJ,SAAS;MAC7B;MACA,IAAIK,YAAY,EAAE;QAChBH,QAAQ,CAAC8B,cAAc,CAAC,cAAc,EAAE3B,YAAY,CAAC;QACrDA,YAAY,GAAGL,SAAS;MAC1B;MACA,IAAIQ,UAAU,EAAE;QACdN,QAAQ,CAAC8B,cAAc,CAAC,YAAY,EAAExB,UAAU,CAAC;QACjDA,UAAU,GAAGR,SAAS;MACxB;MACA,IAAI,CAACM,OAAO,EAAE;QACZA,OAAO,GAAG,IAAI,CAACQ,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;QACnCb,QAAQ,CAACc,EAAE,CAAC,SAAS,EAAEV,OAAmB,CAAC;MAC7C;MAEA,MAAML,GAAG,CAACoC,SAAS,EAAE;IACvB,CAAC;IACD,MAAMhB,WAAWA,CAAA;MACf,MAAMnB,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MACzC,MAAMO,QAAQ,GAAI,MAAMlB,QAAQ,CAACoC,OAAO,CAAC;QACvCC,MAAM,EAAE;OACT,CAAc;MACf,OAAOnB,QAAQ,CAACI,GAAG,CAAEC,CAAC,IAAKlC,UAAU,CAACkC,CAAC,CAAC,CAAC;IAC3C,CAAC;IACD,MAAME,UAAUA,CAAA;MACd,MAAMzB,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MACzC,MAAMI,OAAO,GACXf,QAAQ,CAACyB,UAAU,EAAE,KACpB,MAAMzB,QAAQ,EAAEoC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAa,CAAE,CAAC,CAAC;MACtD,OAAOC,MAAM,CAACvB,OAAO,CAAC;IACxB,CAAC;IACD,MAAMJ,WAAWA,CAAA;MACf,eAAe4B,YAAYA,CAAA;QACzB;QACA;QACA,MAAMC,WAAW,GAAG,MAAM,CAAC,YAAW;UACpC,MAAM;YAAEC,OAAO,EAAEC;UAAG,CAAE,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC;UACtD,IAAI,OAAOA,GAAG,KAAK,UAAU,IAAI,OAAOA,GAAG,CAACD,OAAO,KAAK,UAAU,EAChE,OAAOC,GAAG,CAACD,OAAO;UACpB,OAAOC,GAAoC;QAC7C,CAAC,EAAC,CAAE;QAEJ3C,GAAG,GAAG,IAAIyC,WAAW,CAAC;UACpBG,OAAO,EAAE,OAAO;UAChB;UACA,GAAIhD,UAAiD;UACrDiD,cAAc,EAAEC,MAAM,CAACC,WAAW,CAChCvC,MAAM,CAACwC,MAAM,CAACzB,GAAG,CAAEI,KAAK,IAAI;YAC1B,MAAM,CAACsB,GAAG,CAAC,GAAG/D,cAAc,CAAC;cAC3ByC,KAAK;cACLuB,UAAU,EAAE1C,MAAM,CAAC0C;aACpB,CAAC;YACF,OAAO,CAACvB,KAAK,CAAClB,EAAE,EAAEwC,GAAG,CAAC;UACxB,CAAC,CAAC,CACH;UACDE,YAAY,EAAEvD,UAAU,CAACuD,YAAY,IAAI,EAAE;UAC3CC,WAAW,EAAExD,UAAU,CAACwD,WAAW,IAAI;SACxC,CAAC;QACF,MAAMpD,GAAG,CAACqD,IAAI,EAAE;QAChB,OAAOrD,GAAG,CAACY,WAAW,EAAG;MAC3B;MAEA,IAAI,CAACX,QAAQ,EAAE;QACb,IAAI,CAACC,eAAe,EAAEA,eAAe,GAAGsC,YAAY,EAAE;QACtDvC,QAAQ,GAAG,MAAMC,eAAe;MAClC;MACA,OAAOD,QAAS;IAClB,CAAC;IACD,MAAMqD,YAAYA,CAAA;MAChB,IAAI;QACF;QACA;QACA,MAAMC,OAAO,GAAG,GAAG;QACnB,MAAMpC,QAAQ,GAAG,MAAM3B,SAAS,CAC9B,MAAMC,WAAW,CAAC,MAAM,IAAI,CAAC2B,WAAW,EAAE,EAAE;UAAEmC;QAAO,CAAE,CAAC,EACxD;UACEC,KAAK,EAAED,OAAO,GAAG,CAAC;UAClBE,UAAU,EAAE;SACb,CACF;QACD,OAAO,CAAC,CAACtC,QAAQ,CAACrB,MAAM;MAC1B,CAAC,CAAC,MAAM;QACN,OAAO,KAAK;MACd;IACF,CAAC;IACD,MAAM8B,WAAWA,CAAA8B,IAAA,EAAuC;MAAA,IAAtC;QAAEC,yBAAyB;QAAE3C;MAAO,CAAE,GAAA0C,IAAA;MACtD,MAAMzD,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MAEzC,MAAMe,KAAK,GAAGnB,MAAM,CAACwC,MAAM,CAACY,IAAI,CAAEpC,CAAC,IAAKA,CAAC,CAACf,EAAE,KAAKO,OAAO,CAAC;MACzD,IAAI,CAACW,KAAK,EAAE,MAAM,IAAIvC,gBAAgB,CAAC,IAAIJ,uBAAuB,EAAE,CAAC;MAErE,IAAI;QACF,MAAM6E,OAAO,CAACC,GAAG,CAAC,CAChB7D,QAAQ,CACLoC,OAAO,CAAC;UACPC,MAAM,EAAE,4BAA4B;UACpCyB,MAAM,EAAE,CAAC;YAAE/C,OAAO,EAAEzB,WAAW,CAACyB,OAAO;UAAC,CAAE;SAC3C;QACD;QACA;QACA;QACA;QACA;QAAA,CACCgD,IAAI,CAAC,YAAW;UACf,MAAMvC,cAAc,GAAG,MAAM,IAAI,CAACC,UAAU,EAAE;UAC9C,IAAID,cAAc,KAAKT,OAAO,EAC5BR,MAAM,CAACyD,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE;YAAElD;UAAO,CAAE,CAAC;QAC9C,CAAC,CAAC,EACJ,IAAI6C,OAAO,CAAQM,OAAO,IACxB3D,MAAM,CAACyD,OAAO,CAACG,IAAI,CAAC,QAAQ,EAAEC,KAAA,IAAgC;UAAA,IAA/B;YAAErD,OAAO,EAAES;UAAc,CAAE,GAAA4C,KAAA;UACxD,IAAI5C,cAAc,KAAKT,OAAO,EAAEmD,OAAO,EAAE;QAC3C,CAAC,CAAC,CACH,CACF,CAAC;QACF,OAAOxC,KAAK;MACd,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACZ,MAAMN,KAAK,GAAGM,GAAe;QAE7B;QACA,IACEN,KAAK,CAACC,IAAI,KAAK,IAAI;QACnB;QACA;QACCD,KAAgE,EAC7DyC,IAAI,EAAEC,aAAa,EAAEzC,IAAI,KAAK,IAAI,EACtC;UACA,IAAI;YACF,MAAM;cAAEY,OAAO,EAAE8B,aAAa;cAAE,GAAGC;YAAc,CAAE,GACjD9C,KAAK,CAAC8C,cAAc,IAAI,EAAE;YAC5B,IAAIC,iBAAuC;YAC3C,IAAIf,yBAAyB,EAAEe,iBAAiB,EAC9CA,iBAAiB,GAAGf,yBAAyB,CAACe,iBAAiB,MAC5D,IAAIF,aAAa,EACpBE,iBAAiB,GAAG,CAClBF,aAAa,CAACvB,GAAG,EACjB,GAAGH,MAAM,CAAC6B,MAAM,CAACF,cAAc,CAAC,CAAClD,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACyB,GAAG,CAAC,CACnD;YAEH,IAAI2B,OAA0B;YAC9B,IAAIjB,yBAAyB,EAAEiB,OAAO,EAAE9E,MAAM,EAC5C8E,OAAO,GAAGjB,yBAAyB,CAACiB,OAAO,MACxCA,OAAO,GAAG,CAACjD,KAAK,CAACiD,OAAO,CAAClC,OAAO,EAAEmC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAErD,MAAMC,gBAAgB,GAAG;cACvBJ,iBAAiB;cACjB1D,OAAO,EAAEzB,WAAW,CAACyB,OAAO,CAAC;cAC7B+D,SAAS,EAAEpB,yBAAyB,EAAEoB,SAAS,IAAIpD,KAAK,CAACjB,IAAI;cAC7DsE,QAAQ,EAAErB,yBAAyB,EAAEqB,QAAQ;cAC7CC,cAAc,EACZtB,yBAAyB,EAAEsB,cAAc,IACzCtD,KAAK,CAACsD,cAAc;cACtBL;aACmC;YAErC,MAAM3E,QAAQ,CAACoC,OAAO,CAAC;cACrBC,MAAM,EAAE,yBAAyB;cACjCyB,MAAM,EAAE,CAACe,gBAAgB;aAC1B,CAAC;YAEF,MAAMrD,cAAc,GAAG,MAAM,IAAI,CAACC,UAAU,EAAE;YAC9C,IAAID,cAAc,KAAKT,OAAO,EAC5B,MAAM,IAAI3B,wBAAwB,CAChC,IAAI6F,KAAK,CAAC,4CAA4C,CAAC,CACxD;YAEH,OAAOvD,KAAK;UACd,CAAC,CAAC,OAAOE,KAAK,EAAE;YACd,MAAM,IAAIxC,wBAAwB,CAACwC,KAAc,CAAC;UACpD;QACF;QAEA,IAAIA,KAAK,CAACC,IAAI,KAAKzC,wBAAwB,CAACyC,IAAI,EAC9C,MAAM,IAAIzC,wBAAwB,CAACwC,KAAK,CAAC;QAC3C,MAAM,IAAIzC,gBAAgB,CAACyC,KAAK,CAAC;MACnC;IACF,CAAC;IACD,MAAMG,iBAAiBA,CAACb,QAAQ;MAC9B;MACA,IAAIA,QAAQ,CAACrB,MAAM,KAAK,CAAC,EAAE,IAAI,CAACoC,YAAY,EAAE;MAC9C;MAAA,KACK,IAAI1B,MAAM,CAACyD,OAAO,CAACkB,aAAa,CAAC,SAAS,CAAC,EAAE;QAChD,MAAMnE,OAAO,GAAG,CAAC,MAAM,IAAI,CAACU,UAAU,EAAE,EAAE0D,QAAQ,EAAE;QACpD,IAAI,CAACvE,SAAS,CAAC;UAAEG;QAAO,CAAE,CAAC;MAC7B;MACA;MAAA,KAEER,MAAM,CAACyD,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE;QAC5B/C,QAAQ,EAAEA,QAAQ,CAACI,GAAG,CAAEC,CAAC,IAAKlC,UAAU,CAACkC,CAAC,CAAC;OAC5C,CAAC;IACN,CAAC;IACDS,cAAcA,CAACN,KAAK;MAClB,MAAMX,OAAO,GAAGuB,MAAM,CAACZ,KAAK,CAAC;MAC7BnB,MAAM,CAACyD,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE;QAAElD;MAAO,CAAE,CAAC;IAC5C,CAAC;IACD,MAAMH,SAASA,CAACwE,WAAW;MACzB,MAAMlE,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;MACzC,IAAID,QAAQ,CAACrB,MAAM,KAAK,CAAC,EAAE;MAE3B,MAAMkB,OAAO,GAAGuB,MAAM,CAAC8C,WAAW,CAACrE,OAAO,CAAC;MAC3CR,MAAM,CAACyD,OAAO,CAACC,IAAI,CAAC,SAAS,EAAE;QAAE/C,QAAQ;QAAEH;MAAO,CAAE,CAAC;MAErD,MAAMf,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MACzC,IAAIP,OAAO,EAAE;QACXJ,QAAQ,CAAC8B,cAAc,CAAC,SAAS,EAAE1B,OAAO,CAAC;QAC3CA,OAAO,GAAGN,SAAS;MACrB;MACA,IAAI,CAACI,eAAe,EAAE;QACpBA,eAAe,GAAG,IAAI,CAAC6B,iBAAiB,CAAClB,IAAI,CAAC,IAAI,CAAC;QACnDb,QAAQ,CAACc,EAAE,CAAC,iBAAiB,EAAEZ,eAA2B,CAAC;MAC7D;MACA,IAAI,CAACC,YAAY,EAAE;QACjBA,YAAY,GAAG,IAAI,CAAC6B,cAAc,CAACnB,IAAI,CAAC,IAAI,CAAC;QAC7Cb,QAAQ,CAACc,EAAE,CAAC,cAAc,EAAEX,YAAwB,CAAC;MACvD;MACA,IAAI,CAACG,UAAU,EAAE;QACfA,UAAU,GAAG,IAAI,CAAC2B,YAAY,CAACpB,IAAI,CAAC,IAAI,CAAC;QACzCb,QAAQ,CAACc,EAAE,CAAC,YAAY,EAAER,UAAsB,CAAC;MACnD;IACF,CAAC;IACD,MAAM2B,YAAYA,CAACL,KAAK;MACtB,MAAM5B,QAAQ,GAAG,MAAM,IAAI,CAACW,WAAW,EAAE;MAEzC;MACA;MACA,IAAIiB,KAAK,IAAKA,KAAwB,CAACC,IAAI,KAAK,IAAI,EAAE;QACpD,IAAI7B,QAAQ,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAACmB,WAAW,EAAE,EAAEtB,MAAM,EAAE;MACvD;MAEA;MACA,IAAI,OAAOwF,YAAY,KAAK,WAAW,EAAE;QACvCA,YAAY,CAACC,UAAU,CAAC,sBAAsB,CAAC;QAC/CD,YAAY,CAACC,UAAU,CAAC,sBAAsB,CAAC;MACjD;MAEA/E,MAAM,CAACyD,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;MAEjC;MACA,IAAI,CAAC/D,eAAe,EAAE;QACpBA,eAAe,GAAG,IAAI,CAAC6B,iBAAiB,CAAClB,IAAI,CAAC,IAAI,CAAC;QACnDb,QAAQ,CAACc,EAAE,CAAC,iBAAiB,EAAEZ,eAA2B,CAAC;MAC7D;MACA,IAAIC,YAAY,EAAE;QAChBH,QAAQ,CAAC8B,cAAc,CAAC,cAAc,EAAE3B,YAAY,CAAC;QACrDA,YAAY,GAAGL,SAAS;MAC1B;MACA,IAAIQ,UAAU,EAAE;QACdN,QAAQ,CAAC8B,cAAc,CAAC,YAAY,EAAExB,UAAU,CAAC;QACjDA,UAAU,GAAGR,SAAS;MACxB;MACA,IAAI,CAACM,OAAO,EAAE;QACZA,OAAO,GAAG,IAAI,CAACQ,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;QACnCb,QAAQ,CAACc,EAAE,CAAC,SAAS,EAAEV,OAAmB,CAAC;MAC7C;IACF,CAAC;IACDa,YAAYA,CAACsE,GAAG;MACdhF,MAAM,CAACyD,OAAO,CAACC,IAAI,CAAC,SAAS,EAAE;QAAEvE,IAAI,EAAE,aAAa;QAAE2E,IAAI,EAAEkB;MAAG,CAAE,CAAC;IACpE;GACD,CAAC,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}