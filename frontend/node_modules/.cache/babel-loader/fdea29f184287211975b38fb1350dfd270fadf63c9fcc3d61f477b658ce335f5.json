{"ast":null,"code":"import { call } from '../actions/call.js';\nimport { filterQueryOptions } from './utils.js';\nexport function callQueryOptions(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    async queryFn(_ref) {\n      let {\n        queryKey\n      } = _ref;\n      const {\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      const data = await call(config, {\n        ...parameters\n      });\n      return data ?? null;\n    },\n    queryKey: callQueryKey(options)\n  };\n}\nexport function callQueryKey(options) {\n  return ['call', filterQueryOptions(options)];\n}","map":{"version":3,"names":["call","filterQueryOptions","callQueryOptions","config","options","arguments","length","undefined","queryFn","_ref","queryKey","scopeKey","_","parameters","data","callQueryKey"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/core/src/query/call.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type CallErrorType,\n  type CallParameters,\n  type CallReturnType,\n  call,\n} from '../actions/call.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type CallOptions<config extends Config> = Compute<\n  ExactPartial<CallParameters<config>> & ScopeKeyParameter\n>\n\nexport function callQueryOptions<config extends Config>(\n  config: config,\n  options: CallOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { scopeKey: _, ...parameters } = queryKey[1]\n      const data = await call(config, {\n        ...parameters,\n      } as CallParameters)\n      return data ?? null\n    },\n    queryKey: callQueryKey(options),\n  } as const satisfies QueryOptions<\n    CallQueryFnData,\n    CallErrorType,\n    CallData,\n    CallQueryKey<config>\n  >\n}\n\nexport type CallQueryFnData = CallReturnType\n\nexport type CallData = CallQueryFnData\n\nexport function callQueryKey<config extends Config>(\n  options: CallOptions<config>,\n) {\n  return ['call', filterQueryOptions(options)] as const\n}\n\nexport type CallQueryKey<config extends Config> = ReturnType<\n  typeof callQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,IAAI,QACC,oBAAoB;AAI3B,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,gBAAgBA,CAC9BC,MAAc,EACmB;EAAA,IAAjCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,EAAE;EAEjC,OAAO;IACL,MAAMG,OAAOA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAQ,CAAE,GAAAD,IAAA;MACxB,MAAM;QAAEE,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAMI,IAAI,GAAG,MAAMd,IAAI,CAACG,MAAM,EAAE;QAC9B,GAAGU;OACc,CAAC;MACpB,OAAOC,IAAI,IAAI,IAAI;IACrB,CAAC;IACDJ,QAAQ,EAAEK,YAAY,CAACX,OAAO;GAM/B;AACH;AAMA,OAAM,SAAUW,YAAYA,CAC1BX,OAA4B;EAE5B,OAAO,CAAC,MAAM,EAAEH,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}