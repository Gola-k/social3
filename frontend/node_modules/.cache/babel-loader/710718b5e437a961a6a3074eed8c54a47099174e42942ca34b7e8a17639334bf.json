{"ast":null,"code":"import { getToken } from '../actions/getToken.js';\nimport { filterQueryOptions } from './utils.js';\nexport function getTokenQueryOptions(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    async queryFn(_ref) {\n      let {\n        queryKey\n      } = _ref;\n      const {\n        address,\n        scopeKey: _,\n        ...parameters\n      } = queryKey[1];\n      if (!address) throw new Error('address is required');\n      return getToken(config, {\n        ...parameters,\n        address\n      });\n    },\n    queryKey: getTokenQueryKey(options)\n  };\n}\nexport function getTokenQueryKey() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return ['token', filterQueryOptions(options)];\n}","map":{"version":3,"names":["getToken","filterQueryOptions","getTokenQueryOptions","config","options","arguments","length","undefined","queryFn","_ref","queryKey","address","scopeKey","_","parameters","Error","getTokenQueryKey"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/@wagmi/core/src/query/getToken.ts"],"sourcesContent":["import type { QueryOptions } from '@tanstack/query-core'\n\nimport {\n  type GetTokenErrorType,\n  type GetTokenParameters,\n  type GetTokenReturnType,\n  getToken,\n} from '../actions/getToken.js'\nimport type { Config } from '../createConfig.js'\nimport type { ScopeKeyParameter } from '../types/properties.js'\nimport type { Compute, ExactPartial } from '../types/utils.js'\nimport { filterQueryOptions } from './utils.js'\n\nexport type GetTokenOptions<config extends Config> = Compute<\n  ExactPartial<GetTokenParameters<config>> & ScopeKeyParameter\n>\n\nexport function getTokenQueryOptions<config extends Config>(\n  config: config,\n  options: GetTokenOptions<config> = {},\n) {\n  return {\n    async queryFn({ queryKey }) {\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\n      if (!address) throw new Error('address is required')\n      return getToken(config, { ...parameters, address })\n    },\n    queryKey: getTokenQueryKey(options),\n  } as const satisfies QueryOptions<\n    GetTokenQueryFnData,\n    GetTokenErrorType,\n    GetTokenData,\n    GetTokenQueryKey<config>\n  >\n}\n\nexport type GetTokenQueryFnData = GetTokenReturnType\n\nexport type GetTokenData = GetTokenQueryFnData\n\nexport function getTokenQueryKey<config extends Config>(\n  options: GetTokenOptions<config> = {},\n) {\n  return ['token', filterQueryOptions(options)] as const\n}\n\nexport type GetTokenQueryKey<config extends Config> = ReturnType<\n  typeof getTokenQueryKey<config>\n>\n"],"mappings":"AAEA,SAIEA,QAAQ,QACH,wBAAwB;AAI/B,SAASC,kBAAkB,QAAQ,YAAY;AAM/C,OAAM,SAAUC,oBAAoBA,CAClCC,MAAc,EACuB;EAAA,IAArCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EAErC,OAAO;IACL,MAAMG,OAAOA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAQ,CAAE,GAAAD,IAAA;MACxB,MAAM;QAAEE,OAAO;QAAEC,QAAQ,EAAEC,CAAC;QAAE,GAAGC;MAAU,CAAE,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MAC3D,IAAI,CAACC,OAAO,EAAE,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACpD,OAAOf,QAAQ,CAACG,MAAM,EAAE;QAAE,GAAGW,UAAU;QAAEH;MAAO,CAAE,CAAC;IACrD,CAAC;IACDD,QAAQ,EAAEM,gBAAgB,CAACZ,OAAO;GAMnC;AACH;AAMA,OAAM,SAAUY,gBAAgBA,CAAA,EACO;EAAA,IAArCZ,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EAErC,OAAO,CAAC,OAAO,EAAEJ,kBAAkB,CAACG,OAAO,CAAC,CAAU;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}