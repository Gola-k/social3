{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { injected } from \"wagmi/connectors\";\nimport axios from \"axios\";\nfunction useAuth() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [session, setSession] = useState({});\n  const {\n    connectAsync\n  } = useConnect();\n  const {\n    disconnectAsync\n  } = useDisconnect();\n  const {\n    isConnected\n  } = useAccount();\n  const {\n    signMessageAsync\n  } = useSignMessage();\n  const ServerUrl = \"http://localhost:4000\";\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n    // enabling the web3 provider metamask\n    const res = await connectAsync({\n      connector: injected({\n        target: 'metaMask'\n      })\n    });\n    const {\n      accounts,\n      chainId\n    } = res;\n    const userData = {\n      address: accounts[0],\n      chain: chainId\n    };\n    const {\n      data\n    } = await axios.post(`${ServerUrl}/request-message`, userData, {\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    });\n    const message = data.message;\n    const signature = await signMessageAsync({\n      message\n    });\n    await axios.post(`${ServerUrl}/verify`, {\n      message,\n      signature\n    }, {\n      withCredentials: true\n    } // set cookie from Express server\n    );\n    axios(`${ServerUrl}/authenticate`, {\n      withCredentials: true\n    }).then(({\n      data\n    }) => {\n      const {\n        iat,\n        ...authData\n      } = data; // remove unimportant iat value\n      console.log(\"authenticating\");\n      setSession(authData);\n      return authData;\n    }).catch(err => {\n      console.log(\"error authenticating\");\n      console.log(err);\n      return null;\n    });\n  };\n  async function signOut() {\n    await axios(`${ServerUrl}/logout`, {\n      withCredentials: true\n    });\n  }\n\n  // Function to log in and set user state\n  const authenticate = useCallback(async () => {\n    try {\n      const userData = await handleAuth();\n      console.log(session, \"session\");\n      console.log(\"setting user data as \", userData);\n      setUser(userData);\n      console.log(\"user data is \", user);\n      console.log(\"isAuthenticated is \", isAuthenticated);\n      setIsAuthenticated(true);\n      console.log(\"isAuthenticated is \", isAuthenticated);\n    } catch (error) {\n      console.error('Authentication failed:', error);\n      setIsAuthenticated(false);\n    }\n  }, []);\n\n  // Function to log out and clear user state\n  const logout = useCallback(() => {\n    signOut();\n    setUser(null);\n    setIsAuthenticated(false);\n  }, []);\n  return {\n    authenticate,\n    logout,\n    isAuthenticated,\n    user\n  };\n}\n_s(useAuth, \"GnitQ1pe1aSUFOs5XqZtiFliHWc=\", false, function () {\n  return [useConnect, useDisconnect, useAccount, useSignMessage];\n});\nexport default useAuth;","map":{"version":3,"names":["useState","useCallback","useAccount","useConnect","useSignMessage","useDisconnect","injected","axios","useAuth","_s","user","setUser","isAuthenticated","setIsAuthenticated","session","setSession","connectAsync","disconnectAsync","isConnected","signMessageAsync","ServerUrl","handleAuth","res","connector","target","accounts","chainId","userData","address","chain","data","post","headers","message","signature","withCredentials","then","iat","authData","console","log","catch","err","signOut","authenticate","error","logout"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { useAccount, useConnect, useSignMessage, useDisconnect } from \"wagmi\";\nimport { injected } from \"wagmi/connectors\";\nimport axios from \"axios\";\n\nfunction useAuth() {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [session, setSession] = useState({});\n\n\n  const { connectAsync } = useConnect();\n  const { disconnectAsync } = useDisconnect();\n  const { isConnected } = useAccount();\n  const { signMessageAsync } = useSignMessage();\n\n  const ServerUrl = \"http://localhost:4000\";\n\n  const handleAuth = async () => {\n    if (isConnected) {\n      await disconnectAsync();\n    }\n    // enabling the web3 provider metamask\n    const res = await connectAsync({\n      connector: injected({ target: 'metaMask'}),\n    });\n\n    const { accounts, chainId } = res;\n\n    const userData = { address: accounts[0], chain: chainId };\n\n    const { data } = await axios.post(\n      `${ServerUrl}/request-message`,\n      userData,\n      {\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      }\n    );\n\n    const message = data.message;\n\n    const signature = await signMessageAsync({ message });\n\n    await axios.post(\n      `${ServerUrl}/verify`,\n      {\n        message,\n        signature,\n      },\n      { withCredentials: true } // set cookie from Express server\n    );\n\n    axios(`${ServerUrl}/authenticate`, {\n        withCredentials: true,\n      })\n        .then(({ data }) => {\n          const { iat, ...authData } = data; // remove unimportant iat value\n            console.log(\"authenticating\")\n          setSession(authData);\n          return authData;\n        })\n        .catch((err) => {\n            console.log(\"error authenticating\")\n          console.log(err);\n          return null;\n        });\n\n  };\n\n\n  async function signOut() {\n    await axios(`${ServerUrl}/logout`, {\n      withCredentials: true,\n    });\n\n  }\n\n  // Function to log in and set user state\n  const authenticate = useCallback(async () => {\n    try {\n      const userData = await handleAuth();\n      console.log(session,\"session\")\n      console.log(\"setting user data as \", userData)\n      setUser(userData);\n      console.log(\"user data is \", user)\n      console.log(\"isAuthenticated is \", isAuthenticated)\n      setIsAuthenticated(true);\n      console.log(\"isAuthenticated is \", isAuthenticated)\n    } catch (error) {\n      console.error('Authentication failed:', error);\n      setIsAuthenticated(false);\n    }\n  }, []);\n\n  // Function to log out and clear user state\n  const logout = useCallback(() => {\n    signOut();\n    setUser(null);\n    setIsAuthenticated(false);\n  }, []);\n\n  return { authenticate, logout, isAuthenticated, user };\n}\n\nexport default useAuth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}