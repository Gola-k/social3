{"ast":null,"code":"'use client';\n\nimport { getClient, watchClient } from '@wagmi/core';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useClient */\nexport function useClient() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const config = useConfig(parameters);\n  return useSyncExternalStoreWithSelector(onChange => watchClient(config, {\n    onChange\n  }), () => getClient(config, parameters), () => getClient(config, parameters), x => x, (a, b) => a?.uid === b?.uid);\n}","map":{"version":3,"names":["getClient","watchClient","useSyncExternalStoreWithSelector","useConfig","useClient","parameters","arguments","length","undefined","config","onChange","x","a","b","uid"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useClient.ts"],"sourcesContent":["'use client'\n\nimport {\n  type Config,\n  type GetClientParameters,\n  type GetClientReturnType,\n  type ResolvedRegister,\n  getClient,\n  watchClient,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseClientParameters<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n> = Compute<GetClientParameters<config, chainId> & ConfigParameter<config>>\n\nexport type UseClientReturnType<\n  config extends Config = Config,\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n> = GetClientReturnType<config, chainId>\n\n/** https://wagmi.sh/react/api/hooks/useClient */\nexport function useClient<\n  config extends Config = ResolvedRegister['config'],\n  chainId extends config['chains'][number]['id'] | number | undefined =\n    | config['chains'][number]['id']\n    | undefined,\n>(\n  parameters: UseClientParameters<config, chainId> = {},\n): UseClientReturnType<config, chainId> {\n  const config = useConfig(parameters)\n\n  return useSyncExternalStoreWithSelector(\n    (onChange) => watchClient(config, { onChange }),\n    () => getClient(config, parameters),\n    () => getClient(config, parameters),\n    (x) => x,\n    (a, b) => a?.uid === b?.uid,\n  ) as any\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAKEA,SAAS,EACTC,WAAW,QACN,aAAa;AAEpB,SAASC,gCAAgC,QAAQ,+CAA+C;AAGhG,SAASC,SAAS,QAAQ,gBAAgB;AAgB1C;AACA,OAAM,SAAUC,SAASA,CAAA,EAM8B;EAAA,IAArDC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmD,EAAE;EAErD,MAAMG,MAAM,GAAGN,SAAS,CAACE,UAAU,CAAC;EAEpC,OAAOH,gCAAgC,CACpCQ,QAAQ,IAAKT,WAAW,CAACQ,MAAM,EAAE;IAAEC;EAAQ,CAAE,CAAC,EAC/C,MAAMV,SAAS,CAACS,MAAM,EAAEJ,UAAU,CAAC,EACnC,MAAML,SAAS,CAACS,MAAM,EAAEJ,UAAU,CAAC,EAClCM,CAAC,IAAKA,CAAC,EACR,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,EAAEE,GAAG,KAAKD,CAAC,EAAEC,GAAG,CACrB;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}