{"ast":null,"code":"'use client';\n\nimport { getEnsTextQueryOptions } from '@wagmi/core/query';\nimport { useQuery } from '../utils/query.js';\nimport { useChainId } from './useChainId.js';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useEnsText */\nexport function useEnsText() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    key,\n    name,\n    query = {}\n  } = parameters;\n  const config = useConfig(parameters);\n  const chainId = useChainId({\n    config\n  });\n  const options = getEnsTextQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId\n  });\n  const enabled = Boolean(key && name && (query.enabled ?? true));\n  return useQuery({\n    ...query,\n    ...options,\n    enabled\n  });\n}","map":{"version":3,"names":["getEnsTextQueryOptions","useQuery","useChainId","useConfig","useEnsText","parameters","arguments","length","undefined","key","name","query","config","chainId","options","enabled","Boolean"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useEnsText.ts"],"sourcesContent":["'use client'\n\nimport type { Config, GetEnsTextErrorType, ResolvedRegister } from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport {\n  type GetEnsTextData,\n  type GetEnsTextOptions,\n  type GetEnsTextQueryFnData,\n  type GetEnsTextQueryKey,\n  getEnsTextQueryOptions,\n} from '@wagmi/core/query'\n\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\nimport { useChainId } from './useChainId.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseEnsTextParameters<\n  config extends Config = Config,\n  selectData = GetEnsTextData,\n> = Compute<\n  GetEnsTextOptions<config> &\n    ConfigParameter<config> &\n    QueryParameter<\n      GetEnsTextQueryFnData,\n      GetEnsTextErrorType,\n      selectData,\n      GetEnsTextQueryKey<config>\n    >\n>\n\nexport type UseEnsTextReturnType<selectData = GetEnsTextData> =\n  UseQueryReturnType<selectData, GetEnsTextErrorType>\n\n/** https://wagmi.sh/react/api/hooks/useEnsText */\nexport function useEnsText<\n  config extends Config = ResolvedRegister['config'],\n  selectData = GetEnsTextData,\n>(\n  parameters: UseEnsTextParameters<config, selectData> = {},\n): UseEnsTextReturnType<selectData> {\n  const { key, name, query = {} } = parameters\n\n  const config = useConfig(parameters)\n  const chainId = useChainId({ config })\n\n  const options = getEnsTextQueryOptions(config, {\n    ...parameters,\n    chainId: parameters.chainId ?? chainId,\n  })\n  const enabled = Boolean(key && name && (query.enabled ?? true))\n\n  return useQuery({ ...query, ...options, enabled })\n}\n"],"mappings":"AAAA,YAAY;;AAIZ,SAKEA,sBAAsB,QACjB,mBAAmB;AAG1B,SAAkCC,QAAQ,QAAQ,mBAAmB;AACrE,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAmB1C;AACA,OAAM,SAAUC,UAAUA,CAAA,EAIiC;EAAA,IAAzDC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuD,EAAE;EAEzD,MAAM;IAAEG,GAAG;IAAEC,IAAI;IAAEC,KAAK,GAAG;EAAE,CAAE,GAAGN,UAAU;EAE5C,MAAMO,MAAM,GAAGT,SAAS,CAACE,UAAU,CAAC;EACpC,MAAMQ,OAAO,GAAGX,UAAU,CAAC;IAAEU;EAAM,CAAE,CAAC;EAEtC,MAAME,OAAO,GAAGd,sBAAsB,CAACY,MAAM,EAAE;IAC7C,GAAGP,UAAU;IACbQ,OAAO,EAAER,UAAU,CAACQ,OAAO,IAAIA;GAChC,CAAC;EACF,MAAME,OAAO,GAAGC,OAAO,CAACP,GAAG,IAAIC,IAAI,KAAKC,KAAK,CAACI,OAAO,IAAI,IAAI,CAAC,CAAC;EAE/D,OAAOd,QAAQ,CAAC;IAAE,GAAGU,KAAK;IAAE,GAAGG,OAAO;IAAEC;EAAO,CAAE,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}