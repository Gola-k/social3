{"ast":null,"code":"'use client';\n\nimport { useMutation } from '@tanstack/react-query';\nimport { writeContractMutationOptions } from '@wagmi/core/query';\nimport { useConfig } from './useConfig.js';\n/** https://wagmi.sh/react/api/hooks/useWriteContract */\nexport function useWriteContract() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    mutation\n  } = parameters;\n  const config = useConfig(parameters);\n  const mutationOptions = writeContractMutationOptions(config);\n  const {\n    mutate,\n    mutateAsync,\n    ...result\n  } = useMutation({\n    ...mutation,\n    ...mutationOptions\n  });\n  return {\n    ...result,\n    writeContract: mutate,\n    writeContractAsync: mutateAsync\n  };\n}","map":{"version":3,"names":["useMutation","writeContractMutationOptions","useConfig","useWriteContract","parameters","arguments","length","undefined","mutation","config","mutationOptions","mutate","mutateAsync","result","writeContract","writeContractAsync"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/wagmi/src/hooks/useWriteContract.ts"],"sourcesContent":["'use client'\n\nimport { useMutation } from '@tanstack/react-query'\nimport type {\n  Config,\n  ResolvedRegister,\n  WriteContractErrorType,\n} from '@wagmi/core'\nimport {\n  type WriteContractData,\n  type WriteContractMutate,\n  type WriteContractMutateAsync,\n  type WriteContractVariables,\n  writeContractMutationOptions,\n} from '@wagmi/core/query'\nimport type { Abi } from 'viem'\n\nimport type { ConfigParameter } from '../types/properties.js'\nimport type {\n  UseMutationParameters,\n  UseMutationReturnType,\n} from '../utils/query.js'\nimport { useConfig } from './useConfig.js'\n\nexport type UseWriteContractParameters<\n  config extends Config = Config,\n  context = unknown,\n> = ConfigParameter<config> & {\n  mutation?:\n    | UseMutationParameters<\n        WriteContractData,\n        WriteContractErrorType,\n        WriteContractVariables<\n          Abi,\n          string,\n          readonly unknown[],\n          config,\n          config['chains'][number]['id']\n        >,\n        context\n      >\n    | undefined\n}\n\nexport type UseWriteContractReturnType<\n  config extends Config = Config,\n  context = unknown,\n> = UseMutationReturnType<\n  WriteContractData,\n  WriteContractErrorType,\n  WriteContractVariables<\n    Abi,\n    string,\n    readonly unknown[],\n    config,\n    config['chains'][number]['id']\n  >,\n  context\n> & {\n  writeContract: WriteContractMutate<config, context>\n  writeContractAsync: WriteContractMutateAsync<config, context>\n}\n\n/** https://wagmi.sh/react/api/hooks/useWriteContract */\nexport function useWriteContract<\n  config extends Config = ResolvedRegister['config'],\n  context = unknown,\n>(\n  parameters: UseWriteContractParameters<config, context> = {},\n): UseWriteContractReturnType<config, context> {\n  const { mutation } = parameters\n\n  const config = useConfig(parameters)\n\n  const mutationOptions = writeContractMutationOptions(config)\n  const { mutate, mutateAsync, ...result } = useMutation({\n    ...mutation,\n    ...mutationOptions,\n  })\n\n  type Return = UseWriteContractReturnType<config, context>\n  return {\n    ...result,\n    writeContract: mutate as Return['writeContract'],\n    writeContractAsync: mutateAsync as Return['writeContractAsync'],\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,WAAW,QAAQ,uBAAuB;AAMnD,SAKEC,4BAA4B,QACvB,mBAAmB;AAQ1B,SAASC,SAAS,QAAQ,gBAAgB;AAyC1C;AACA,OAAM,SAAUC,gBAAgBA,CAAA,EAI8B;EAAA,IAA5DC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0D,EAAE;EAE5D,MAAM;IAAEG;EAAQ,CAAE,GAAGJ,UAAU;EAE/B,MAAMK,MAAM,GAAGP,SAAS,CAACE,UAAU,CAAC;EAEpC,MAAMM,eAAe,GAAGT,4BAA4B,CAACQ,MAAM,CAAC;EAC5D,MAAM;IAAEE,MAAM;IAAEC,WAAW;IAAE,GAAGC;EAAM,CAAE,GAAGb,WAAW,CAAC;IACrD,GAAGQ,QAAQ;IACX,GAAGE;GACJ,CAAC;EAGF,OAAO;IACL,GAAGG,MAAM;IACTC,aAAa,EAAEH,MAAiC;IAChDI,kBAAkB,EAAEH;GACrB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}