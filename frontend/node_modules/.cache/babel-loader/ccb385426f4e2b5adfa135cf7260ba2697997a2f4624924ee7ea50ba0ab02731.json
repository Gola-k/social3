{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n  constructor(_ref) {\n    let {\n      givenLength,\n      maxBytecodeSize\n    } = _ref;\n    super(`Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`, {\n      name: 'BytecodeLengthExceedsMaxSizeError'\n    });\n  }\n}\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n  constructor(_ref2) {\n    let {\n      givenLengthInWords\n    } = _ref2;\n    super(`Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`, {\n      name: 'BytecodeLengthInWordsMustBeOddError'\n    });\n  }\n}\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n  constructor(_ref3) {\n    let {\n      givenLength\n    } = _ref3;\n    super(`The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`, {\n      name: 'BytecodeLengthMustBeDivisibleBy32Error'\n    });\n  }\n}","map":{"version":3,"names":["BaseError","BytecodeLengthExceedsMaxSizeError","constructor","_ref","givenLength","maxBytecodeSize","name","BytecodeLengthInWordsMustBeOddError","_ref2","givenLengthInWords","BytecodeLengthMustBeDivisibleBy32Error","_ref3"],"sources":["/Users/siddharthpranay/Desktop/projects/Chirping/frontend/node_modules/viem/zksync/errors/bytecode.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\n\nexport type BytecodeLengthExceedsMaxSizeErrorType =\n  BytecodeLengthExceedsMaxSizeError & {\n    name: 'BytecodeLengthExceedsMaxSizeError'\n  }\n\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n  constructor({\n    givenLength,\n    maxBytecodeSize,\n  }: { givenLength: number; maxBytecodeSize: bigint }) {\n    super(\n      `Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthExceedsMaxSizeError' },\n    )\n  }\n}\n\nexport type BytecodeLengthInWordsMustBeOddErrorType =\n  BytecodeLengthInWordsMustBeOddError & {\n    name: 'BytecodeLengthInWordsMustBeOddError'\n  }\n\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n  constructor({ givenLengthInWords }: { givenLengthInWords: number }) {\n    super(\n      `Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`,\n      { name: 'BytecodeLengthInWordsMustBeOddError' },\n    )\n  }\n}\n\nexport type BytecodeLengthMustBeDivisibleBy32ErrorType =\n  BytecodeLengthMustBeDivisibleBy32Error & {\n    name: 'BytecodeLengthMustBeDivisibleBy32Error'\n  }\n\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n  constructor({ givenLength }: { givenLength: number }) {\n    super(\n      `The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthMustBeDivisibleBy32Error' },\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,sBAAsB;AAOhD,OAAM,MAAOC,iCAAkC,SAAQD,SAAS;EAC9DE,YAAAC,IAAA,EAGmD;IAAA,IAHvC;MACVC,WAAW;MACXC;IAAe,CACkC,GAAAF,IAAA;IACjD,KAAK,CACH,kCAAkCE,eAAe,yBAAyBD,WAAW,EAAE,EACvF;MAAEE,IAAI,EAAE;IAAmC,CAAE,CAC9C;EACH;;AAQF,OAAM,MAAOC,mCAAoC,SAAQP,SAAS;EAChEE,YAAAM,KAAA,EAAkE;IAAA,IAAtD;MAAEC;IAAkB,CAAkC,GAAAD,KAAA;IAChE,KAAK,CACH,wEAAwEC,kBAAkB,EAAE,EAC5F;MAAEH,IAAI,EAAE;IAAqC,CAAE,CAChD;EACH;;AAQF,OAAM,MAAOI,sCAAuC,SAAQV,SAAS;EACnEE,YAAAS,KAAA,EAAoD;IAAA,IAAxC;MAAEP;IAAW,CAA2B,GAAAO,KAAA;IAClD,KAAK,CACH,uEAAuEP,WAAW,EAAE,EACpF;MAAEE,IAAI,EAAE;IAAwC,CAAE,CACnD;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}